(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{389:function(_,a,t){"use strict";t.r(a);var v=t(7),e=Object(v.a)({},(function(){var _=this,a=_._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("p",[_._v("🖥️个人小站 ："),a("a",{attrs:{href:"https://manamn.space/",target:"_blank",rel:"noopener noreferrer"}},[_._v("个人博客"),a("OutboundLink")],1),_._v("，欢迎大家访问")]),_._v(" "),a("p",[_._v("配套视频参考："),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1iq4y1u7vj?p=1&vd_source=cea816a08805c218ac4390ae9b61ae31",target:"_blank",rel:"noopener noreferrer"}},[_._v("MySQL数据库天花板--康师傅"),a("OutboundLink")],1)]),_._v(" "),a("h2",{attrs:{id:"_1-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[_._v("#")]),_._v(" 1. 概述")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711165954976.png",alt:"image-20220711165954976"}}),_._v(" "),a("p",[_._v("在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的 资源。为保证数据的一致性，需要对 "),a("code",[_._v("并发操作进行控制")]),_._v(" ，因此产生了 "),a("code",[_._v("锁")]),_._v(" 。同时 "),a("code",[_._v("锁机制")]),_._v(" 也为实现MySQL 的各个隔离级别提供了保证。 "),a("code",[_._v("锁冲突")]),_._v(" 也是影响数据库 "),a("code",[_._v("并发访问性能")]),_._v(" 的一个重要因素。所以锁对数据库而言显得尤其重要，也更加复杂。")]),_._v(" "),a("h2",{attrs:{id:"_2-mysql并发事务访问相同记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-mysql并发事务访问相同记录"}},[_._v("#")]),_._v(" 2. MySQL并发事务访问相同记录")]),_._v(" "),a("p",[_._v("并发事务访问相同记录的情况大致可以划分为3种：")]),_._v(" "),a("h3",{attrs:{id:"_2-1-读-读情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-读-读情况"}},[_._v("#")]),_._v(" 2.1 读-读情况")]),_._v(" "),a("p",[a("code",[_._v("读-读")]),_._v("情况，即并发事务相继"),a("code",[_._v("读取相同的记录")]),_._v("。读取操作本身不会对记录有任何影响，并不会引起什么问题，所以允许这种情况的发生。")]),_._v(" "),a("h3",{attrs:{id:"_2-2-写-写情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-写-写情况"}},[_._v("#")]),_._v(" 2.2 写-写情况")]),_._v(" "),a("p",[a("code",[_._v("写-写")]),_._v(" 情况，即并发事务相继对相同的记录做出改动。")]),_._v(" "),a("p",[_._v("在这种情况下会发生 "),a("code",[_._v("脏写")]),_._v(" 的问题，任何一种隔离级别都不允许这种问题的发生。所以在多个未提交事务相继对一条记录做改动时，需要让它们 "),a("code",[_._v("排队执行")]),_._v(" ，这个排队的过程其实是通过 "),a("code",[_._v("锁")]),_._v(" 来实现的。这个所谓的锁其实是一个内存中的结构 ，在事务执行前本来是没有锁的，也就是说一开始是没有 锁结构 和记录进 行关联的，如图所示：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711181120639.png",alt:"image-20220711181120639"}})]),_._v(" "),a("p",[_._v("当一个事务想对这条记录做改动时，首先会看看内存中有没有与这条记录关联的 "),a("code",[_._v("锁结构")]),_._v(" ，当没有的时候 就会在内存中生成一个 "),a("code",[_._v("锁结构")]),_._v(" 与之关联。比如，事务"),a("code",[_._v("T1")]),_._v(" 要对这条记录做改动，就需要生成一个 "),a("code",[_._v("锁结构")]),_._v(" 与之关联：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711192633239.png",alt:"image-20220711192633239"}})]),_._v(" "),a("p",[_._v("在"),a("code",[_._v("锁结构")]),_._v("里有很多信息，为了简化理解，只把两个比较重要的属性拿了出来：")]),_._v(" "),a("ul",[a("li",[a("code",[_._v("trx信息")]),_._v("：代表这个锁结构是哪个事务生成的。")]),_._v(" "),a("li",[a("code",[_._v("is_waiting")]),_._v("：代表当前事务是否在等待。")])]),_._v(" "),a("p",[_._v("在事务"),a("code",[_._v("T1")]),_._v("改动了这条记录后，就生成了一个"),a("code",[_._v("锁结构")]),_._v("与该记录关联，因为之前没有别的事务为这条记录加锁，所以"),a("code",[_._v("is_waiting")]),_._v("属性就是"),a("code",[_._v("false")]),_._v("，我们把这个场景就称值为"),a("code",[_._v("获取锁成功")]),_._v("，或者"),a("code",[_._v("加锁成功")]),_._v("，然后就可以继续执行操作了。")]),_._v(" "),a("p",[_._v("在事务"),a("code",[_._v("T1")]),_._v("提交之前，另一个事务"),a("code",[_._v("T2")]),_._v("也想对该记录做改动，那么先看看有没有"),a("code",[_._v("锁结构")]),_._v("与这条记录关联，发现有一个"),a("code",[_._v("锁结构")]),_._v("与之关联后，然后也生成了一个锁结构与这条记录关联，不过锁结构的"),a("code",[_._v("is_waiting")]),_._v("属性值为"),a("code",[_._v("true")]),_._v("，表示当前事务需要等待，我们把这个场景就称之为"),a("code",[_._v("获取锁失败")]),_._v("，或者"),a("code",[_._v("加锁失败")]),_._v("，图示：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711193732567.png",alt:"image-20220711193732567"}})]),_._v(" "),a("p",[_._v("在事务T1提交之后，就会把该事务生成的"),a("code",[_._v("锁结构释放")]),_._v("掉，然后看看还有没有别的事务在等待获取锁，发现了事务T2还在等待获取锁，所以把事务T2对应的锁结构的"),a("code",[_._v("is_waiting")]),_._v("属性设置为"),a("code",[_._v("false")]),_._v("，然后把该事务对应的线程唤醒，让它继续执行，此时事务T2就算获取到锁了。效果就是这样。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711194904328.png",alt:"image-20220711194904328"}})]),_._v(" "),a("p",[_._v("小结几种说法：")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("不加锁")]),_._v(" "),a("p",[_._v("意思就是不需要在内存中生成对应的 "),a("code",[_._v("锁结构")]),_._v(" ，可以直接执行操作。")])]),_._v(" "),a("li",[a("p",[_._v("获取锁成功，或者加锁成功")]),_._v(" "),a("p",[_._v("意思就是在内存中生成了对应的 "),a("code",[_._v("锁结构")]),_._v(" ，而且锁结构的 "),a("code",[_._v("is_waiting")]),_._v(" 属性为 "),a("code",[_._v("false")]),_._v(" ，也就是事务 可以继续执行操作。")])]),_._v(" "),a("li",[a("p",[_._v("获取锁失败，或者加锁失败，或者没有获取到锁")]),_._v(" "),a("p",[_._v("意思就是在内存中生成了对应的 "),a("code",[_._v("锁结构")]),_._v(" ，不过锁结构的 "),a("code",[_._v("is_waiting")]),_._v(" 属性为 "),a("code",[_._v("true")]),_._v(" ，也就是事务 需要等待，不可以继续执行操作。")])])]),_._v(" "),a("h3",{attrs:{id:"_2-3-读-写或写-读情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-读-写或写-读情况"}},[_._v("#")]),_._v(" 2.3 读-写或写-读情况")]),_._v(" "),a("p",[a("code",[_._v("读-写")]),_._v(" 或 "),a("code",[_._v("写-读")]),_._v("，即一个事务进行读取操作，另一个进行改动操作。这种情况下可能发生 "),a("code",[_._v("脏读 、 不可重 复读 、 幻读")]),_._v(" 的问题。")]),_._v(" "),a("p",[_._v("各个数据库厂商对 "),a("code",[_._v("SQL标准")]),_._v(" 的支持都可能不一样。比如MySQL在 "),a("code",[_._v("REPEATABLE READ")]),_._v(" 隔离级别上就已经解决了 "),a("code",[_._v("幻读")]),_._v(" 问题。")]),_._v(" "),a("h3",{attrs:{id:"_2-4-并发问题的解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-并发问题的解决方案"}},[_._v("#")]),_._v(" 2.4 并发问题的解决方案")]),_._v(" "),a("p",[_._v("怎么解决 "),a("code",[_._v("脏读 、 不可重复读 、 幻读")]),_._v(" 这些问题呢？其实有两种可选的解决方案：")]),_._v(" "),a("ul",[a("li",[_._v("方案一：读操作利用多版本并发控制（ "),a("code",[_._v("MVCC")]),_._v(" ，下章讲解），写操作进行 "),a("code",[_._v("加锁")]),_._v(" 。")])]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711202206405.png",alt:"image-20220711202206405"}}),_._v(" "),a("blockquote",[a("p",[_._v("普通的SELECT语句在READ COMMITTED和REPEATABLE READ隔离级别下会使用到MVCC读取记录。")]),_._v(" "),a("ul",[a("li",[_._v("在 "),a("code",[_._v("READ COMMITTED")]),_._v(" 隔离级别下，一个事务在执行过程中每次执行SELECT操作时都会生成一 个ReadView，ReadView的存在本身就保证了"),a("code",[_._v("事务不可以读取到未提交的事务所做的更改")]),_._v(" ，也就是避免了脏读现象；")]),_._v(" "),a("li",[_._v("在 "),a("code",[_._v("REPEATABLE READ")]),_._v(" 隔离级别下，一个事务在执行过程中只有 "),a("code",[_._v("第一次执行SELECT操作")]),_._v(" 才会生成一个ReadView，之后的SELECT操作都 "),a("code",[_._v("复用")]),_._v(" 这个ReadView，这样也就避免了不可重复读和幻读的问题。")])])]),_._v(" "),a("ul",[a("li",[_._v("方案二：读、写操作都采用 "),a("code",[_._v("加锁")]),_._v(" 的方式。")])]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711203250284.png",alt:"image-20220711203250284"}}),_._v(" "),a("ul",[a("li",[a("p",[_._v("小结对比发现：")]),_._v(" "),a("ul",[a("li",[_._v("采用 "),a("code",[_._v("MVCC")]),_._v(" 方式的话， 读-写 操作彼此并不冲突， 性能更高 。")]),_._v(" "),a("li",[_._v("采用 "),a("code",[_._v("加锁")]),_._v(" 方式的话， 读-写 操作彼此需要 "),a("code",[_._v("排队执行")]),_._v(" ，影响性能。")])]),_._v(" "),a("p",[_._v("一般情况下我们当然愿意采用 "),a("code",[_._v("MVCC")]),_._v(" 来解决 "),a("code",[_._v("读-写")]),_._v(" 操作并发执行的问题，但是业务在某些特殊情况下，要求必须采用 "),a("code",[_._v("加锁")]),_._v("的方式执行。下面就讲解下MySQL中不同类别的锁。")])])]),_._v(" "),a("h2",{attrs:{id:"_3-锁的不同角度分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-锁的不同角度分类"}},[_._v("#")]),_._v(" 3. 锁的不同角度分类")]),_._v(" "),a("p",[_._v("锁的分类图，如下：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711203519162.png",alt:"image-20220711203519162"}})]),_._v(" "),a("h3",{attrs:{id:"_3-1-从数据操作的类型划分-读锁、写锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-从数据操作的类型划分-读锁、写锁"}},[_._v("#")]),_._v(" 3.1 从数据操作的类型划分：读锁、写锁")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711203723941.png",alt:"image-20220711203723941"}}),_._v(" "),a("ul",[a("li",[a("code",[_._v("读锁")]),_._v(" ：也称为 "),a("code",[_._v("共享锁")]),_._v(" 、英文用 S 表示。针对同一份数据，多个事务的读操作可以同时进行而不会互相影响，相互不阻塞的。")]),_._v(" "),a("li",[a("code",[_._v("写锁")]),_._v(" ：也称为 "),a("code",[_._v("排他锁")]),_._v(" 、英文用 X 表示。当前写操作没有完成前，它会阻断其他写锁和读锁。这样 就能确保在给定的时间里，只有一个事务能执行写入，并防止其他用户读取正在写入的同一资源。")])]),_._v(" "),a("p",[a("strong",[_._v("需要注意的是对于 InnoDB 引擎来说，读锁和写锁可以加在表上，也可以加在行上。")])]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711204843684.png",alt:"image-20220711204843684"}}),_._v(" "),a("h4",{attrs:{id:"_1-锁定读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-锁定读"}},[_._v("#")]),_._v(" 1.锁定读")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711212931912.png",alt:"image-20220711212931912"}}),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711213741630.png",alt:"image-20220711213741630"}}),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711214013208.png",alt:"image-20220711214013208"}}),_._v(" "),a("h4",{attrs:{id:"_2-写操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-写操作"}},[_._v("#")]),_._v(" 2. 写操作")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711214412163.png",alt:"image-20220711214412163"}}),_._v(" "),a("h3",{attrs:{id:"_3-2-从数据操作的粒度划分-表级锁、页级锁、行锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-从数据操作的粒度划分-表级锁、页级锁、行锁"}},[_._v("#")]),_._v(" 3.2 从数据操作的粒度划分：表级锁、页级锁、行锁")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711214719510.png",alt:"image-20220711214719510"}}),_._v(" "),a("h4",{attrs:{id:"_1-表锁-table-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-表锁-table-lock"}},[_._v("#")]),_._v(" 1. 表锁（Table Lock）")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711214805088.png",alt:"image-20220711214805088"}}),_._v(" "),a("h5",{attrs:{id:"_1-表级别的s锁、x锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-表级别的s锁、x锁"}},[_._v("#")]),_._v(" ① 表级别的S锁、X锁")]),_._v(" "),a("p",[_._v("在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级别的 "),a("code",[_._v("S锁")]),_._v(" 或者 "),a("code",[_._v("X锁")]),_._v(" 的。在对某个表执行一些诸如 "),a("code",[_._v("ALTER TABLE 、 DROP TABLE")]),_._v(" 这类的 DDL 语句时，其 他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞。同理，某个事务中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行 "),a("code",[_._v("DDL")]),_._v(" 语句也会 发生阻塞。这个过程其实是通过在 server层使用一种称之为 "),a("code",[_._v("元数据锁")]),_._v(" （英文名： Metadata Locks ， 简称 MDL ）结构来实现的。")]),_._v(" "),a("p",[_._v("一般情况下，不会使用InnoDB存储引擎提供的表级别的 "),a("code",[_._v("S锁")]),_._v(" 和 "),a("code",[_._v("X锁")]),_._v(" 。只会在一些特殊情况下，比方说 "),a("code",[_._v("崩溃恢复")]),_._v(" 过程中用到。比如，在系统变量 "),a("code",[_._v("autocommit=0，innodb_table_locks = 1")]),_._v(" 时， 手动 获取 InnoDB存储引擎提供的表t 的 "),a("code",[_._v("S锁")]),_._v(" 或者 "),a("code",[_._v("X锁")]),_._v(" 可以这么写：")]),_._v(" "),a("ul",[a("li",[a("p",[a("code",[_._v("LOCK TABLES t READ")]),_._v(" ：InnoDB存储引擎会对表 t 加表级别的 "),a("code",[_._v("S锁")]),_._v("。")])]),_._v(" "),a("li",[a("p",[a("code",[_._v("LOCK TABLES t WRITE")]),_._v(" ：InnoDB存储引擎会对表 t 加表级别的 "),a("code",[_._v("X锁")]),_._v(" 。")])])]),_._v(" "),a("p",[_._v("不过尽量避免在使用InnoDB存储引擎的表上使用 "),a("code",[_._v("LOCK TABLES")]),_._v(" 这样的手动锁表语句，它们并不会提供 什么额外的保护，只是会降低并发能力而已。InnoDB的厉害之处还是实现了更细粒度的 "),a("code",[_._v("行锁")]),_._v(" ，关于 InnoDB表级别的 "),a("code",[_._v("S锁")]),_._v(" 和"),a("code",[_._v("X锁")]),_._v(" 大家了解一下就可以了。")]),_._v(" "),a("p",[_._v("**举例：**下面我们讲解MyISAM引擎下的表锁。")]),_._v(" "),a("p",[_._v("步骤1：创建表并添加数据")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("CREATE TABLE mylock(\nid INT NOT NULL PRIMARY KEY auto_increment,\nNAME VARCHAR(20)\n)ENGINE myisam;\n\n# 插入一条数据\nINSERT INTO mylock(NAME) VALUES('a');\n\n# 查询表中所有数据\nSELECT * FROM mylock;\n+----+------+\n| id | Name |\n+----+------+\n| 1  | a    |\n+----+------+\n")])])]),a("p",[_._v("步骤二：查看表上加过的锁")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("SHOW OPEN TABLES; # 主要关注In_use字段的值\n或者\nSHOW OPEN TABLES where In_use > 0;\n")])])]),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711220342251.png",alt:"image-20220711220342251"}}),_._v(" "),a("p",[_._v("或者")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711220418859.png",alt:"image-20220711220418859"}}),_._v(" "),a("p",[_._v("上面的结果表明，当前数据库中没有被锁定的表")]),_._v(" "),a("p",[_._v("步骤3：手动增加表锁命令")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("LOCK TABLES t READ; # 存储引擎会对表t加表级别的共享锁。共享锁也叫读锁或S锁（Share的缩写）\nLOCK TABLES t WRITE; # 存储引擎会对表t加表级别的排他锁。排他锁也叫独占锁、写锁或X锁（exclusive的缩写）\n")])])]),a("p",[_._v("比如：")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711220442269.png",alt:"image-20220711220442269"}}),_._v(" "),a("p",[_._v("步骤4：释放表锁")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("UNLOCK TABLES; # 使用此命令解锁当前加锁的表\n")])])]),a("p",[_._v("比如：")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711220502141.png",alt:"image-20220711220502141"}}),_._v(" "),a("p",[_._v("步骤5：加读锁")]),_._v(" "),a("p",[_._v("我们为mylock表加read锁（读阻塞写），观察阻塞的情况，流程如下：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711220553225.png",alt:"image-20220711220553225"}})]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711220616537.png",alt:"image-20220711220616537"}})]),_._v(" "),a("p",[_._v("步骤6：加写锁")]),_._v(" "),a("p",[_._v("为mylock表加write锁，观察阻塞的情况，流程如下：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711220711630.png",alt:"image-20220711220711630"}})]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711220730112.png",alt:"image-20220711220730112"}})]),_._v(" "),a("p",[_._v("总结：")]),_._v(" "),a("p",[_._v("MyISAM在执行查询语句（SELECT）前，会给涉及的所有表加读锁，在执行增删改操作前，会给涉及的表加写锁。InnoDB存储引擎是不会为这个表添加表级别的读锁和写锁的。")]),_._v(" "),a("p",[_._v("MySQL的表级锁有两种模式：（以MyISAM表进行操作的演示）")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("表共享读锁（Table Read Lock）")])]),_._v(" "),a("li",[a("p",[_._v("表独占写锁（Table Write Lock）")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711220929248.png",alt:"image-20220711220929248"}})])])]),_._v(" "),a("h5",{attrs:{id:"_2-意向锁-intention-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-意向锁-intention-lock"}},[_._v("#")]),_._v(" ② 意向锁 （intention lock）")]),_._v(" "),a("p",[_._v("InnoDB 支持 "),a("code",[_._v("多粒度锁（multiple granularity locking）")]),_._v(" ，它允许 "),a("code",[_._v("行级锁")]),_._v(" 与 "),a("code",[_._v("表级锁")]),_._v(" 共存，而"),a("code",[_._v("意向锁")]),_._v("就是其中的一种 "),a("code",[_._v("表锁")]),_._v(" 。")]),_._v(" "),a("ol",[a("li",[_._v("意向锁的存在是为了协调行锁和表锁的关系，支持多粒度（表锁和行锁）的锁并存。")]),_._v(" "),a("li",[_._v("意向锁是一种"),a("code",[_._v("不与行级锁冲突表级锁")]),_._v("，这一点非常重要。")]),_._v(" "),a("li",[_._v("表明“某个事务正在某些行持有了锁或该事务准备去持有锁”")])]),_._v(" "),a("p",[_._v("意向锁分为两种：")]),_._v(" "),a("ul",[a("li",[a("p",[a("strong",[_._v("意向共享锁")]),_._v("（intention shared lock, IS）：事务有意向对表中的某些行加"),a("strong",[_._v("共享锁")]),_._v("（S锁）")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。\nSELECT column FROM table ... LOCK IN SHARE MODE;\n")])])])]),_._v(" "),a("li",[a("p",[a("strong",[_._v("意向排他锁")]),_._v("（intention exclusive lock, IX）：事务有意向对表中的某些行加"),a("strong",[_._v("排他锁")]),_._v("（X锁）")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。\nSELECT column FROM table ... FOR UPDATE;\n")])])])])]),_._v(" "),a("p",[_._v("即：意向锁是由存储引擎 "),a("code",[_._v("自己维护的")]),_._v(" ，用户无法手动操作意向锁，在为数据行加共享 / 排他锁之前， InooDB 会先获取该数据行 "),a("code",[_._v("所在数据表的对应意向锁")]),_._v(" 。")]),_._v(" "),a("p",[a("strong",[_._v("1. 意向锁要解决的问题")])]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220711222132300.png",alt:"image-20220711222132300"}}),_._v(" "),a("p",[_._v("**举例：**创建表teacher,插入6条数据，事务的隔离级别默认为"),a("code",[_._v("Repeatable-Read")]),_._v("，如下所示。")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("CREATE TABLE `teacher` (\n\t`id` int NOT NULL,\n    `name` varchar(255) NOT NULL,\n    PRIMARY KEY (`id`)\n)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\nINSERT INTO `teacher` VALUES\n('1', 'zhangsan'),\n('2', 'lisi'),\n('3', 'wangwu'),\n('4', 'zhaoliu'),\n('5', 'songhongkang'),\n('6', 'leifengyang');\n")])])]),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("mysql> SELECT @@transaction_isolation;\n+-------------------------+\n| @@transaction_isolation |\n+-------------------------+\n| REPEATABLE-READ         |\n+-------------------------+\n")])])]),a("p",[_._v("假设事务A获取了某一行的排他锁，并未提交，语句如下所示:")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("BEGIN;\n\nSELECT * FROM teacher WHERE id = 6 FOR UPDATE;\n")])])]),a("p",[_._v("事务B想要获取teacher表的表读锁，语句如下：")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("BEGIN;\n\nLOCK TABLES teacher READ;\n")])])]),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220712124209006.png",alt:"image-20220712124209006"}}),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("BEGIN;\n\nSELECT * FROM teacher WHERE id = 6 FOR UPDATE;\n")])])]),a("p",[_._v("此时teacher表存在两把锁：teacher表上的意向排他锁与id未6的数据行上的排他锁。事务B想要获取teacher表的共享锁。")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("BEGIN;\n\nLOCK TABLES teacher READ;\n")])])]),a("p",[_._v("此时事务B检测事务A持有teacher表的意向排他锁，就可以得知事务A必须持有该表中某些数据行的排他锁，那么事务B对teacher表的加锁请求就会被排斥（阻塞），而无需去检测表中的每一行数据是否存在排他锁。")]),_._v(" "),a("p",[a("strong",[_._v("意向锁的并发性")])]),_._v(" "),a("p",[_._v("意向锁不会与行级的共享 / 排他锁互斥！正因为如此，意向锁并不会影响到多个事务对不同数据行加排他锁时的并发性。（不然我们直接用普通的表锁就行了）")]),_._v(" "),a("p",[_._v("我们扩展一下上面 teacher表的例子来概括一下意向锁的作用（一条数据从被锁定到被释放的过程中，可 能存在多种不同锁，但是这里我们只着重表现意向锁）。")]),_._v(" "),a("p",[_._v("事务A先获得了某一行的排他锁，并未提交：")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("BEGIN;\n\nSELECT * FROM teacher WHERE id = 6 FOR UPDATE;\n")])])]),a("p",[_._v("事务A获取了teacher表上的意向排他锁。事务A获取了id为6的数据行上的排他锁。之后事务B想要获取teacher表上的共享锁。")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("BEGIN;\n\nLOCK TABLES teacher READ;\n")])])]),a("p",[_._v("事务B检测到事务A持有teacher表的意向排他锁。事务B对teacher表的加锁请求被阻塞（排斥）。最后事务C也想获取teacher表中某一行的排他锁。")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("BEGIN;\n\nSELECT * FROM teacher WHERE id = 5 FOR UPDATE;\n")])])]),a("p",[_._v("事务C申请teacher表的意向排他锁。事务C检测到事务A持有teacher表的意向排他锁。因为意向锁之间并不互斥，所以事务C获取到了teacher表的意向排他锁。因为id为5的数据行上不存在任何排他锁，最终事务C成功获取到了该数据行上的排他锁。")]),_._v(" "),a("p",[a("strong",[_._v("从上面的案例可以得到如下结论：")])]),_._v(" "),a("ol",[a("li",[_._v("InnoDB 支持 "),a("code",[_._v("多粒度锁")]),_._v(" ，特定场景下，行级锁可以与表级锁共存。")]),_._v(" "),a("li",[_._v("意向锁之间互不排斥，但除了 IS 与 S 兼容外， "),a("code",[_._v("意向锁会与 共享锁 / 排他锁 互斥")]),_._v(" 。")]),_._v(" "),a("li",[_._v("IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突。")]),_._v(" "),a("li",[_._v("意向锁在保证并发性的前提下，实现了 "),a("code",[_._v("行锁和表锁共存")]),_._v(" 且 "),a("code",[_._v("满足事务隔离性")]),_._v(" 的要求。")])]),_._v(" "),a("h5",{attrs:{id:"_3-自增锁-auto-inc锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-自增锁-auto-inc锁"}},[_._v("#")]),_._v(" ③ 自增锁（AUTO-INC锁）")]),_._v(" "),a("p",[_._v("在使用MySQL过程中，我们可以为表的某个列添加 "),a("code",[_._v("AUTO_INCREMENT")]),_._v(" 属性。举例：")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("CREATE TABLE `teacher` (\n`id` int NOT NULL AUTO_INCREMENT,\n`name` varchar(255) NOT NULL,\nPRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n")])])]),a("p",[_._v("由于这个表的id字段声明了AUTO_INCREMENT，意味着在书写插入语句时不需要为其赋值，SQL语句修改 如下所示。")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("INSERT INTO `teacher` (name) VALUES ('zhangsan'), ('lisi');\n")])])]),a("p",[_._v("上边的插入语句并没有为id列显式赋值，所以系统会自动为它赋上递增的值，结果如下所示。")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("mysql> select * from teacher;\n+----+----------+\n| id | name     |\n+----+----------+\n| 1  | zhangsan |\n| 2  | lisi     |\n+----+----------+\n2 rows in set (0.00 sec)\n")])])]),a("p",[_._v("现在我们看到的上面插入数据只是一种简单的插入模式，所有插入数据的方式总共分为三类，分别是 “ "),a("code",[_._v("Simple inserts")]),_._v(" ”，“ "),a("code",[_._v("Bulk inserts")]),_._v(" ”和“ "),a("code",[_._v("Mixed-mode inserts")]),_._v("”。")]),_._v(" "),a("p",[a("strong",[_._v("1. “Simple inserts” （简单插入）")])]),_._v(" "),a("p",[_._v("可以 "),a("code",[_._v("预先确定要插入的行数")]),_._v(" （当语句被初始处理时）的语句。包括没有嵌套子查询的单行和多行"),a("code",[_._v("INSERT...VALUES()")]),_._v("和 "),a("code",[_._v("REPLACE")]),_._v(" 语句。比如我们上面举的例子就属于该类插入，已经确定要插入的行 数。")]),_._v(" "),a("p",[a("strong",[_._v("2. “Bulk inserts” （批量插入）")])]),_._v(" "),a("p",[a("code",[_._v("事先不知道要插入的行数")]),_._v(" （和所需自动递增值的数量）的语句。比如 "),a("code",[_._v("INSERT ... SELECT")]),_._v(" ， "),a("code",[_._v("REPLACE ... SELECT")]),_._v(" 和 "),a("code",[_._v("LOAD DATA")]),_._v(" 语句，但不包括纯INSERT。 InnoDB在每处理一行，为AUTO_INCREMENT列")]),_._v(" "),a("p",[a("strong",[_._v("3. “Mixed-mode inserts” （混合模式插入）")])]),_._v(" "),a("p",[_._v("这些是“Simple inserts”语句但是指定部分新行的自动递增值。例如 "),a("code",[_._v("INSERT INTO teacher (id,name) VALUES (1,'a'), (NULL,'b'), (5,'c'), (NULL,'d');")]),_._v(" 只是指定了部分id的值。另一种类型的“混合模式插入”是 "),a("code",[_._v("INSERT ... ON DUPLICATE KEY UPDATE")]),_._v(" 。")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220712175552985.png",alt:"image-20220712175552985"}}),_._v(" "),a("p",[_._v("innodb_autoinc_lock_mode有三种取值，分别对应与不同锁定模式：")]),_._v(" "),a("p",[a("code",[_._v("（1）innodb_autoinc_lock_mode = 0(“传统”锁定模式)")])]),_._v(" "),a("p",[_._v("在此锁定模式下，所有类型的insert语句都会获得一个特殊的表级AUTO-INC锁，用于插入具有 AUTO_INCREMENT列的表。这种模式其实就如我们上面的例子，即每当执行insert的时候，都会得到一个 表级锁(AUTO-INC锁)，使得语句中生成的auto_increment为顺序，且在binlog中重放的时候，可以保证 master与slave中数据的auto_increment是相同的。因为是表级锁，当在同一时间多个事务中执行insert的 时候，对于AUTO-INC锁的争夺会 "),a("code",[_._v("限制并发")]),_._v(" 能力。")]),_._v(" "),a("p",[a("code",[_._v("（2）innodb_autoinc_lock_mode = 1(“连续”锁定模式)")])]),_._v(" "),a("p",[_._v("在 MySQL 8.0 之前，连续锁定模式是 "),a("code",[_._v("默认")]),_._v(" 的。")]),_._v(" "),a("p",[_._v("在这个模式下，“bulk inserts”仍然使用AUTO-INC表级锁，并保持到语句结束。这适用于所有INSERT ... SELECT，REPLACE ... SELECT和LOAD DATA语句。同一时刻只有一个语句可以持有AUTO-INC锁。")]),_._v(" "),a("p",[_._v("对于“Simple inserts”（要插入的行数事先已知），则通过在 "),a("code",[_._v("mutex（轻量锁）")]),_._v(" 的控制下获得所需数量的自动递增值来避免表级AUTO-INC锁， 它只在分配过程的持续时间内保持，而不是直到语句完成。不使用表级AUTO-INC锁，除非AUTO-INC锁由另一个事务保持。如果另一个事务保持AUTO-INC锁，则“Simple inserts”等待AUTO-INC锁，如同它是一个“bulk inserts”。")]),_._v(" "),a("p",[a("code",[_._v("（3）innodb_autoinc_lock_mode = 2(“交错”锁定模式)")])]),_._v(" "),a("p",[_._v("从 MySQL 8.0 开始，交错锁模式是 "),a("code",[_._v("默认")]),_._v(" 设置。")]),_._v(" "),a("p",[_._v("在此锁定模式下，自动递增值 "),a("code",[_._v("保证")]),_._v(" 在所有并发执行的所有类型的insert语句中是 "),a("code",[_._v("唯一")]),_._v(" 且 "),a("code",[_._v("单调递增")]),_._v(" 的。但是，由于多个语句可以同时生成数字（即，跨语句交叉编号），"),a("strong",[_._v("为任何给定语句插入的行生成的值可能不是连续的。")])]),_._v(" "),a("p",[_._v('如果执行的语句是“simple inserts"，其中要插入的行数已提前知道，除了"Mixed-mode inserts"之外，为单个语句生成的数字不会有间隙。然后，当执行"bulk inserts"时，在由任何给定语句分配的自动递增值中可能存在间隙。')]),_._v(" "),a("h5",{attrs:{id:"_4-元数据锁-mdl锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-元数据锁-mdl锁"}},[_._v("#")]),_._v(" ④ 元数据锁（MDL锁）")]),_._v(" "),a("p",[_._v("MySQL5.5引入了meta data lock，简称MDL锁，属于表锁范畴。MDL 的作用是，保证读写的正确性。比 如，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个 "),a("code",[_._v("表结构做变更")]),_._v(" ，增加了一 列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。")]),_._v(" "),a("p",[_._v("因此，"),a("strong",[_._v("当对一个表做增删改查操作的时候，加 MDL读锁；当要对表做结构变更操作的时候，加 MDL 写锁")]),_._v("。")]),_._v(" "),a("p",[_._v("读锁之间不互斥，因此你可以有多个线程同时对一张表增删查改。读写锁之间、写锁之间都是互斥的，用来保证变更表结构操作的安全性，解决了DML和DDL操作之间的一致性问题。"),a("code",[_._v("不需要显式使用")]),_._v("，在访问一个表的时候会被自动加上。")]),_._v(" "),a("p",[a("strong",[_._v("举例：元数据锁的使用场景模拟")])]),_._v(" "),a("p",[_._v("**会话A：**从表中查询数据")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("mysql> BEGIN;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT COUNT(1) FROM teacher;\n+----------+\n| COUNT(1) |\n+----------+\n| 2        |\n+----------+\n1 row int set (7.46 sec)\n")])])]),a("p",[_._v("**会话B：**修改表结构，增加新列")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("mysql> BEGIN;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> alter table teacher add age int not null;\n")])])]),a("p",[_._v("**会话C：**查看当前MySQL的进程")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("mysql> show processlist;\n")])])]),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713142808924.png",alt:"image-20220713142808924"}})]),_._v(" "),a("p",[_._v("通过会话C可以看出会话B被阻塞，这是由于会话A拿到了teacher表的元数据读锁，会话B想申请teacher表的元数据写锁，由于读写锁互斥，会话B需要等待会话A释放元数据锁才能执行。")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713143156759.png",alt:"image-20220713143156759"}}),_._v(" "),a("h4",{attrs:{id:"_2-innodb中的行锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-innodb中的行锁"}},[_._v("#")]),_._v(" 2. InnoDB中的行锁")]),_._v(" "),a("p",[_._v("行锁（Row Lock）也称为记录锁，顾名思义，就是锁住某一行（某条记录 row）。需要注意的是，MySQL服务器层并没有实现行锁机制，"),a("strong",[_._v("行级锁只在存储引擎层实现")]),_._v("。")]),_._v(" "),a("p",[_._v("**优点：**锁定力度小，发生"),a("code",[_._v("锁冲突概率低")]),_._v("，可以实现的"),a("code",[_._v("并发度高")]),_._v("。")]),_._v(" "),a("p",[_._v("**缺点：**对于"),a("code",[_._v("锁的开销比较大")]),_._v("，加锁会比较慢，容易出现"),a("code",[_._v("死锁")]),_._v("情况。")]),_._v(" "),a("p",[_._v("InnoDB与MyISAM的最大不同有两点：一是支持事务（TRANSACTION）；二是采用了行级锁。")]),_._v(" "),a("p",[_._v("首先我们创建表如下：")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("CREATE TABLE student (\n\tid INT,\n    name VARCHAR(20),\n    class VARCHAR(10),\n    PRIMARY KEY (id)\n) Engine=InnoDB CHARSET=utf8;\n")])])]),a("p",[_._v("向这个表里插入几条记录：")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("INSERT INTO student VALUES\n(1, '张三', '一班'),\n(3, '李四', '一班'),\n(8, '王五', '二班'),\n(15, '赵六', '二班'),\n(20, '钱七', '三班');\n\nmysql> SELECT * FROM student;\n")])])]),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713161549241.png",alt:"image-20220713161549241"}}),_._v(" "),a("p",[_._v("student表中的聚簇索引的简图如下所示。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713163353648.png",alt:"image-20220713163353648"}})]),_._v(" "),a("p",[_._v("这里把B+树的索引结构做了超级简化，只把索引中的记录给拿了出来，下面看看都有哪些常用的行锁类型。")]),_._v(" "),a("h5",{attrs:{id:"_1-记录锁-record-locks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-记录锁-record-locks"}},[_._v("#")]),_._v(" ① 记录锁（Record Locks）")]),_._v(" "),a("p",[_._v("记录锁也就是仅仅把一条记录锁，官方的类型名称为："),a("code",[_._v("LOCK_REC_NOT_GAP")]),_._v("。比如我们把id值为8的那条记录加一个记录锁的示意图如果所示。仅仅是锁住了id值为8的记录，对周围的数据没有影响。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713164811567.png",alt:"image-20220713164811567"}})]),_._v(" "),a("p",[_._v("举例如下：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713164948405.png",alt:"image-20220713164948405"}})]),_._v(" "),a("p",[_._v("记录锁是有S锁和X锁之分的，称之为 "),a("code",[_._v("S型记录锁")]),_._v(" 和 "),a("code",[_._v("X型记录锁")]),_._v(" 。")]),_._v(" "),a("ul",[a("li",[_._v("当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；")]),_._v(" "),a("li",[_._v("当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁。")])]),_._v(" "),a("h5",{attrs:{id:"_2-间隙锁-gap-locks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-间隙锁-gap-locks"}},[_._v("#")]),_._v(" ② 间隙锁（Gap Locks）")]),_._v(" "),a("p",[a("code",[_._v("MySQL")]),_._v(" 在 "),a("code",[_._v("REPEATABLE READ")]),_._v(" 隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用 "),a("code",[_._v("MVCC")]),_._v(" 方 案解决，也可以采用 "),a("code",[_._v("加锁")]),_._v("方案解决。但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些 "),a("code",[_._v("幻影记录")]),_._v(" 加上 "),a("code",[_._v("记录锁")]),_._v(" 。InnoDB提出了一种称之为 "),a("code",[_._v("Gap Locks")]),_._v(" 的锁，官方的类型名称为："),a("code",[_._v("LOCK_GAP")]),_._v(" ，我们可以简称为 "),a("code",[_._v("gap锁")]),_._v(" 。比如，把id值为8的那条 记录加一个gap锁的示意图如下。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713171650888.png",alt:"image-20220713171650888"}})]),_._v(" "),a("p",[_._v("图中id值为8的记录加了gap锁，意味着 "),a("code",[_._v("不允许别的事务在id值为8的记录前边的间隙插入新记录")]),_._v(" ，其实就是 id列的值(3, 8)这个区间的新记录是不允许立即插入的。比如，有另外一个事务再想插入一条id值为4的新 记录，它定位到该条新记录的下一条记录的id值为8，而这条记录上又有一个gap锁，所以就会阻塞插入 操作，直到拥有这个gap锁的事务提交了之后，id列的值在区间(3, 8)中的新记录才可以被插入。")]),_._v(" "),a("p",[_._v("**gap锁的提出仅仅是为了防止插入幻影记录而提出的。**虽然有"),a("code",[_._v("共享gap锁")]),_._v("和"),a("code",[_._v("独占gap锁")]),_._v("这样的说法，但是它们起到的作用是相同的。而且如果对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。")]),_._v(" "),a("p",[a("strong",[_._v("举例：")])]),_._v(" "),a("table",[a("thead",[a("tr",[a("th",[_._v("Session1")]),_._v(" "),a("th",[_._v("Session2")])])]),_._v(" "),a("tbody",[a("tr",[a("td",[_._v("select * from student where id=5 lock in share mode;")]),_._v(" "),a("td")]),_._v(" "),a("tr",[a("td"),_._v(" "),a("td",[_._v("select * from student where id=5 for update;")])])])]),_._v(" "),a("p",[_._v("这里session2并不会被堵住。因为表里并没有id=5这条记录，因此session1嘉的是间隙锁(3,8)。而session2也是在这个间隙加的间隙锁。它们有共同的目标，即：保护这个间隙锁，不允许插入值。但，它们之间是不冲突的。")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713174726264.png",alt:"image-20220713174726264"}}),_._v(" "),a("ul",[a("li",[a("code",[_._v("Infimum")]),_._v("记录，表示该页面中最小的记录。")]),_._v(" "),a("li",[a("code",[_._v("Supremun")]),_._v("记录，表示该页面中最大的记录。")])]),_._v(" "),a("p",[_._v("为了实现阻止其他事务插入id值再(20,正无穷)这个区间的新纪录，我们可以给索引中的最后一条记录，也就是id值为20的那条记录所在页面的Supremun记录加上一个gap锁，如图所示。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713174108634.png",alt:"image-20220713174108634"}})]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("mysql> select * from student where id > 20 lock in share mode;\nEmpty set (0.01 sec)\n")])])]),a("p",[_._v("检测：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713174551814.png",alt:"image-20220713174551814"}})]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713174602102.png",alt:"image-20220713174602102"}})]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713175032619.png",alt:"image-20220713175032619"}}),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713192418730.png",alt:"image-20220713192418730"}}),_._v(" "),a("h5",{attrs:{id:"_3-临键锁-next-key-locks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-临键锁-next-key-locks"}},[_._v("#")]),_._v(" ③ 临键锁（Next-Key Locks）")]),_._v(" "),a("p",[_._v("有时候我们既想 "),a("code",[_._v("锁住某条记录")]),_._v(" ，又想 阻止 其他事务在该记录前边的 间隙插入新记录 ，所以InnoDB就提 出了一种称之为 Next-Key Locks 的锁，官方的类型名称为： LOCK_ORDINARY ，我们也可以简称为 next-key锁 。Next-Key Locks是在存储引擎 innodb 、事务级别在 可重复读 的情况下使用的数据库锁， innodb默认的锁就是Next-Key locks。比如，我们把id值为8的那条记录加一个next-key锁的示意图如下：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713192549340.png",alt:"image-20220713192549340"}})]),_._v(" "),a("p",[a("code",[_._v("next-key锁")]),_._v("的本质就是一个"),a("code",[_._v("记录锁")]),_._v("和一个"),a("code",[_._v("gap锁")]),_._v("的合体，它既能保护该条记录，又能阻止别的事务将新记录插入被保护记录前边的"),a("code",[_._v("间隙")]),_._v("。")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("begin;\nselect * from student where id <=8 and id > 3 for update;\n")])])]),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713203124889.png",alt:"image-20220713203124889"}}),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713203532124.png",alt:"image-20220713203532124"}}),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713203619704.png",alt:"image-20220713203619704"}}),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713203714577.png",alt:"image-20220713203714577"}}),_._v(" "),a("h4",{attrs:{id:"_3-页锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-页锁"}},[_._v("#")]),_._v(" 3. 页锁")]),_._v(" "),a("p",[_._v("页锁就是在 "),a("code",[_._v("页的粒度")]),_._v(" 上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当我 们使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。"),a("strong",[_._v("页锁的开销介于表锁和行锁之间，会出现死锁。锁定粒度介于表锁和行锁之间，并发度一般。")])]),_._v(" "),a("p",[_._v("每个层级的锁数量是有限制的，因为锁会占用内存空间， "),a("code",[_._v("锁空间的大小是有限的")]),_._v(" 。当某个层级的锁数量 超过了这个层级的阈值时，就会进行 "),a("code",[_._v("锁升级")]),_._v(" 。锁升级就是用更大粒度的锁替代多个更小粒度的锁，比如 InnoDB 中行锁升级为表锁，这样做的好处是占用的锁空间降低了，但同时数据的并发度也下降了。")]),_._v(" "),a("h3",{attrs:{id:"_3-3-从对待锁的态度划分-乐观锁、悲观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-从对待锁的态度划分-乐观锁、悲观锁"}},[_._v("#")]),_._v(" 3.3 从对待锁的态度划分:乐观锁、悲观锁")]),_._v(" "),a("p",[_._v("从对待锁的态度来看锁的话，可以将锁分成乐观锁和悲观锁，从名字中也可以看出这两种锁是两种看待 "),a("code",[_._v("数据并发的思维方式")]),_._v(" 。需要注意的是，乐观锁和悲观锁并不是锁，而是锁的 "),a("code",[_._v("设计思想")]),_._v(" 。")]),_._v(" "),a("h4",{attrs:{id:"_1-悲观锁-pessimistic-locking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-悲观锁-pessimistic-locking"}},[_._v("#")]),_._v(" 1. 悲观锁（Pessimistic Locking）")]),_._v(" "),a("p",[_._v("悲观锁是一种思想，顾名思义，就是很悲观，对数据被其他事务的修改持保守态度，会通过数据库自身的锁机制来实现，从而保证数据操作的排它性。")]),_._v(" "),a("p",[_._v("悲观锁总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 "),a("code",[_._v("阻塞")]),_._v(" 直到它拿到锁（"),a("strong",[_._v("共享资源每次只给一个线程使用，其它线程阻塞， 用完后再把资源转让给其它线程")]),_._v("）。比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁，当其他线程想要访问数据时，都需要阻塞挂起。Java中 "),a("code",[_._v("synchronized")]),_._v(" 和 "),a("code",[_._v("ReentrantLock")]),_._v(" 等独占锁就是悲观锁思想的实现。")]),_._v(" "),a("p",[a("strong",[_._v("秒杀案例1：")])]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713204544767.png",alt:"image-20220713204544767"}}),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713205010502.png",alt:"image-20220713205010502"}}),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713205135694.png",alt:"image-20220713205135694"}}),_._v(" "),a("h4",{attrs:{id:"_2-乐观锁-optimistic-locking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-乐观锁-optimistic-locking"}},[_._v("#")]),_._v(" 2. 乐观锁（Optimistic Locking）")]),_._v(" "),a("p",[_._v("乐观锁认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，也就是"),a("strong",[_._v("不采用数据库自身的锁机制，而是通过程序来实现")]),_._v("。在程序上，我们可以采用 "),a("code",[_._v("版本号机制")]),_._v(" 或者 "),a("code",[_._v("CAS机制")]),_._v(" 实现。"),a("strong",[_._v("乐观锁适用于多读的应用类型， 这样可以提高吞吐量")]),_._v("。在Java中"),a("code",[_._v("java.util.concurrent.atomic")]),_._v(" 包下的原子变量类就是使用了乐观锁的一种实现方式：CAS实现的。")]),_._v(" "),a("p",[a("strong",[_._v("1. 乐观锁的版本号机制")])]),_._v(" "),a("p",[_._v("在表中设计一个 "),a("code",[_._v("版本字段 version")]),_._v(" ，第一次读的时候，会获取 version 字段的取值。然后对数据进行更新或删除操作时，会执行 "),a("code",[_._v("UPDATE ... SET version=version+1 WHERE version=version")]),_._v(" 。此时 如果已经有事务对这条数据进行了更改，修改就不会成功。")]),_._v(" "),a("p",[_._v("这种方式类似我们熟悉的SVN、CVS版本管理系统，当我们修改了代码进行提交时，首先会检查当前版本号与服务器上的版本号是否一致，如果一致就可以直接提交，如果不一致就需要更新服务器上的最新代码，然后再进行提交。")]),_._v(" "),a("p",[a("strong",[_._v("2. 乐观锁的时间戳机制")])]),_._v(" "),a("p",[_._v("时间戳和版本号机制一样，也是在更新提交的时候，将当前数据的时间戳和更新之前取得的时间戳进行 比较，如果两者一致则更新成功，否则就是版本冲突。")]),_._v(" "),a("p",[_._v("你能看到乐观锁就是程序员自己控制数据并发操作的权限，基本是通过给数据行增加一个戳（版本号或 者时间戳），从而证明当前拿到的数据是否最新。")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713210951100.png",alt:"image-20220713210951100"}}),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211139670.png",alt:"image-20220713211139670"}}),_._v(" "),a("h4",{attrs:{id:"_3-两种锁的适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-两种锁的适用场景"}},[_._v("#")]),_._v(" 3. 两种锁的适用场景")]),_._v(" "),a("p",[_._v("从这两种锁的设计思想中，我们总结一下乐观锁和悲观锁的适用场景：")]),_._v(" "),a("ol",[a("li",[a("code",[_._v("乐观锁")]),_._v(" 适合 "),a("code",[_._v("读操作多")]),_._v(" 的场景，相对来说写的操作比较少。它的优点在于 "),a("code",[_._v("程序实现")]),_._v(" ， "),a("code",[_._v("不存在死锁")]),_._v(" 问题，不过适用场景也会相对乐观，因为它阻止不了除了程序以外的数据库操作。")]),_._v(" "),a("li",[a("code",[_._v("悲观锁")]),_._v(" 适合 "),a("code",[_._v("写操作多")]),_._v(" 的场景，因为写的操作具有 "),a("code",[_._v("排它性")]),_._v(" 。采用悲观锁的方式，可以在数据库层 面阻止其他事务对该数据的操作权限，防止 "),a("code",[_._v("读 - 写")]),_._v(" 和 "),a("code",[_._v("写 - 写")]),_._v(" 的冲突。")])]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211417909.png",alt:"image-20220713211417909"}}),_._v(" "),a("h3",{attrs:{id:"_3-4-按加锁的方式划分-显式锁、隐式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-按加锁的方式划分-显式锁、隐式锁"}},[_._v("#")]),_._v(" 3.4 按加锁的方式划分：显式锁、隐式锁")]),_._v(" "),a("h4",{attrs:{id:"_1-隐式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-隐式锁"}},[_._v("#")]),_._v(" 1. 隐式锁")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211525845.png",alt:"image-20220713211525845"}}),_._v(" "),a("ul",[a("li",[a("strong",[_._v("情景一")]),_._v("：对于聚簇索引记录来说，有一个 "),a("code",[_._v("trx_id")]),_._v(" 隐藏列，该隐藏列记录着最后改动该记录的 "),a("code",[_._v("事务 id")]),_._v(" 。那么如果在当前事务中新插入一条聚簇索引记录后，该记录的 trx_id 隐藏列代表的的就是 当前事务的 事务id ，如果其他事务此时想对该记录添加 S锁 或者 X锁 时，首先会看一下该记录的 trx_id 隐藏列代表的事务是否是当前的活跃事务，如果是的话，那么就帮助当前事务创建一个 X 锁 （也就是为当前事务创建一个锁结构， is_waiting 属性是 false ），然后自己进入等待状态 （也就是为自己也创建一个锁结构， is_waiting 属性是 true ）。")]),_._v(" "),a("li",[a("strong",[_._v("情景二")]),_._v("：对于二级索引记录来说，本身并没有 trx_id 隐藏列，但是在二级索引页面的 Page Header 部分有一个 "),a("code",[_._v("PAGE_MAX_TRX_ID")]),_._v(" 属性，该属性代表对该页面做改动的最大的 "),a("code",[_._v("事务id")]),_._v(" ，如 果 PAGE_MAX_TRX_ID 属性值小于当前最小的活跃 事务id ，那么说明对该页面做修改的事务都已 经提交了，否则就需要在页面中定位到对应的二级索引记录，然后回表找到它对应的聚簇索引记 录，然后再重复 情景一 的做法。")])]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713214522709.png",alt:"image-20220713214522709"}}),_._v(" "),a("p",[a("strong",[_._v("session 1:")])]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v('mysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> insert INTO student VALUES(34,"周八","二班");\nQuery OK, 1 row affected (0.00 sec)\n')])])]),a("p",[a("strong",[_._v("session 2:")])]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("mysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> select * from student lock in share mode; #执行完，当前事务被阻塞\n")])])]),a("p",[_._v("执行下述语句，输出结果：")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("mysql> SELECT * FROM performance_schema.data_lock_waits\\G;\n*************************** 1. row ***************************\n\t\t\t\t\t\tENGINE: INNODB\n\t\tREQUESTING_ENGINE_LOCK_ID: 140562531358232:7:4:9:140562535668584\nREQUESTING_ENGINE_TRANSACTION_ID: 422037508068888\n\t\t\tREQUESTING_THREAD_ID: 64\n\t\t\tREQUESTING_EVENT_ID: 6\nREQUESTING_OBJECT_INSTANCE_BEGIN: 140562535668584\n\t\tBLOCKING_ENGINE_LOCK_ID: 140562531351768:7:4:9:140562535619104\nBLOCKING_ENGINE_TRANSACTION_ID: 15902\n\t\t\tBLOCKING_THREAD_ID: 64\n\t\t\tBLOCKING_EVENT_ID: 6\nBLOCKING_OBJECT_INSTANCE_BEGIN: 140562535619104\n1 row in set (0.00 sec)\n")])])]),a("p",[_._v("隐式锁的逻辑过程如下：")]),_._v(" "),a("p",[_._v("A. InnoDB的每条记录中都一个隐含的trx_id字段，这个字段存在于聚簇索引的B+Tree中。")]),_._v(" "),a("p",[_._v("B. 在操作一条记录前，首先根据记录中的trx_id检查该事务是否是活动的事务(未提交或回滚)。如果是活动的事务，首先将 "),a("code",[_._v("隐式锁")]),_._v(" 转换为 "),a("code",[_._v("显式锁")]),_._v(" (就是为该事务添加一个锁)。")]),_._v(" "),a("p",[_._v("C. 检查是否有锁冲突，如果有冲突，创建锁，并设置为waiting状态。如果没有冲突不加锁，跳到E。")]),_._v(" "),a("p",[_._v("D. 等待加锁成功，被唤醒，或者超时。")]),_._v(" "),a("p",[_._v("E. 写数据，并将自己的trx_id写入trx_id字段。")]),_._v(" "),a("h4",{attrs:{id:"_2-显式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-显式锁"}},[_._v("#")]),_._v(" 2. 显式锁")]),_._v(" "),a("p",[_._v("通过特定的语句进行加锁，我们一般称之为显示加锁，例如：")]),_._v(" "),a("p",[_._v("显示加共享锁：")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("select .... lock in share mode\n")])])]),a("p",[_._v("显示加排它锁：")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("select .... for update\n")])])]),a("h3",{attrs:{id:"_3-5-其它锁之-全局锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-其它锁之-全局锁"}},[_._v("#")]),_._v(" 3.5 其它锁之：全局锁")]),_._v(" "),a("p",[_._v("全局锁就是对 "),a("code",[_._v("整个数据库实例")]),_._v(" 加锁。当你需要让整个库处于 "),a("code",[_._v("只读状态")]),_._v(" 的时候，可以使用这个命令，之后 其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结 构等）和更新类事务的提交语句。全局锁的典型使用 "),a("code",[_._v("场景")]),_._v(" 是：做 "),a("code",[_._v("全库逻辑备份")]),_._v(" 。")]),_._v(" "),a("p",[_._v("全局锁的命令：")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("Flush tables with read lock\n")])])]),a("h3",{attrs:{id:"_3-6-其它锁之-死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-其它锁之-死锁"}},[_._v("#")]),_._v(" 3.6 其它锁之：死锁")]),_._v(" "),a("h4",{attrs:{id:"_1-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[_._v("#")]),_._v(" 1. 概念")]),_._v(" "),a("p",[_._v("两个事务都持有对方需要的锁，并且在等待对方释放，并且双方都不会释放自己的锁。")]),_._v(" "),a("p",[a("strong",[_._v("举例1：")])]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713220714098.png",alt:"image-20220713220714098"}})]),_._v(" "),a("p",[a("strong",[_._v("举例2：")])]),_._v(" "),a("p",[_._v("用户A给用户B转账100，再次同时，用户B也给用户A转账100。这个过程，可能导致死锁。")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713220936236.png",alt:"image-20220713220936236"}}),_._v(" "),a("h4",{attrs:{id:"_2-产生死锁的必要条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-产生死锁的必要条件"}},[_._v("#")]),_._v(" 2. 产生死锁的必要条件")]),_._v(" "),a("ol",[a("li",[_._v("两个或者两个以上事务")]),_._v(" "),a("li",[_._v("每个事务都已经持有锁并且申请新的锁")]),_._v(" "),a("li",[_._v("锁资源同时只能被同一个事务持有或者不兼容")]),_._v(" "),a("li",[_._v("事务之间因为持有锁和申请锁导致彼此循环等待")])]),_._v(" "),a("blockquote",[a("p",[_._v("死锁的关键在于：两个（或以上）的Session加锁的顺序不一致。")])]),_._v(" "),a("h4",{attrs:{id:"_3-如何处理死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何处理死锁"}},[_._v("#")]),_._v(" 3. 如何处理死锁")]),_._v(" "),a("p",[_._v("**方式1：**等待，直到超时（innodb_lock_wait_timeout=50s)")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713221418100.png",alt:"image-20220713221418100"}}),_._v(" "),a("p",[_._v("**方式2：**使用死锁检测处理死锁程序")]),_._v(" "),a("p",[_._v("方式1检测死锁太过被动，innodb还提供了"),a("code",[_._v("wait-for graph算法")]),_._v("来主动进行死锁检测，每当加锁请求无法立即满足需要并进入等待时，wait-for graph算法都会被触发。")]),_._v(" "),a("p",[_._v("这是一种较为"),a("code",[_._v("主动的死锁检测机制")]),_._v("，要求数据库保存"),a("code",[_._v("锁的信息链表")]),_._v("和"),a("code",[_._v("事务等待链表")]),_._v("两部分信息。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713221758941.png",alt:"image-20220713221758941"}})]),_._v(" "),a("p",[_._v("基于这两个信息，可以绘制wait-for graph（等待图）")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220713221830455.png",alt:"image-20220713221830455"}})]),_._v(" "),a("blockquote",[a("p",[_._v("死锁检测的原理是构建一个以事务为顶点，锁为边的有向图，判断有向图是否存在环，存在既有死锁。")])]),_._v(" "),a("p",[_._v("一旦检测到回路、有死锁，这时候InnoDB存储引擎会选择"),a("code",[_._v("回滚undo量最小的事务")]),_._v("，让其他事务继续执行（"),a("code",[_._v("innodb_deadlock_detect=on")]),_._v("表示开启这个逻辑）。")]),_._v(" "),a("p",[_._v("缺点：每个新的被阻塞的线程，都要判断是不是由于自己的加入导致了死锁，这个操作时间复杂度是O(n)。如果100个并发线程同时更新同一行，意味着要检测100*100=1万次，1万个线程就会有1千万次检测。")]),_._v(" "),a("p",[a("strong",[_._v("如何解决？")])]),_._v(" "),a("ul",[a("li",[_._v("方式1：关闭死锁检测，但意味着可能会出现大量的超时，会导致业务有损。")]),_._v(" "),a("li",[_._v("方式2：控制并发访问的数量。比如在中间件中实现对于相同行的更新，在进入引擎之前排队，这样在InnoDB内部就不会有大量的死锁检测工作。")])]),_._v(" "),a("p",[a("strong",[_._v("进一步的思路：")])]),_._v(" "),a("p",[_._v("可以考虑通过将一行改成逻辑上的多行来减少"),a("code",[_._v("锁冲突")]),_._v("。比如，连锁超市账户总额的记录，可以考虑放到多条记录上。账户总额等于这多个记录的值的总和。")]),_._v(" "),a("h4",{attrs:{id:"_4-如何避免死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何避免死锁"}},[_._v("#")]),_._v(" 4. 如何避免死锁")]),_._v(" "),a("img",{staticStyle:{float:"left"},attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714131008260.png",alt:"image-20220714131008260"}}),_._v(" "),a("h2",{attrs:{id:"_4-锁的内部结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-锁的内部结构"}},[_._v("#")]),_._v(" 4. 锁的内部结构")]),_._v(" "),a("p",[_._v("我们前边说对一条记录加锁的本质就是在内存中创建一个"),a("code",[_._v("锁结构")]),_._v("与之关联，那么是不是一个事务对多条记录加锁，就要创建多个"),a("code",[_._v("锁结构")]),_._v("呢？比如：")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("# 事务T1\nSELECT * FROM user LOCK IN SHARE MODE;\n")])])]),a("p",[_._v("理论上创建多个"),a("code",[_._v("锁结构")]),_._v("没问题，但是如果一个事务要获取10000条记录的锁，生成10000个锁结构也太崩溃了！所以决定在对不同记录加锁时，如果符合下边这些条件的记录会放在一个"),a("code",[_._v("锁结构")]),_._v("中。")]),_._v(" "),a("ul",[a("li",[_._v("在同一个事务中进行加锁操作")]),_._v(" "),a("li",[_._v("被加锁的记录在同一个页面中")]),_._v(" "),a("li",[_._v("加锁的类型是一样的")]),_._v(" "),a("li",[_._v("等待状态是一样的")])]),_._v(" "),a("p",[a("code",[_._v("InnoDB")]),_._v(" 存储引擎中的 "),a("code",[_._v("锁结构")]),_._v(" 如下：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714132306208.png",alt:"image-20220714132306208"}})]),_._v(" "),a("p",[_._v("结构解析：")]),_._v(" "),a("p",[a("code",[_._v("1. 锁所在的事务信息")]),_._v("：")]),_._v(" "),a("p",[_._v("不论是 "),a("code",[_._v("表锁")]),_._v(" 还是 "),a("code",[_._v("行锁")]),_._v(" ，都是在事务执行过程中生成的，哪个事务生成了这个锁结构 ，这里就记录这个 事务的信息。")]),_._v(" "),a("p",[_._v("此 "),a("code",[_._v("锁所在的事务信息")]),_._v(" 在内存结构中只是一个指针，通过指针可以找到内存中关于该事务的更多信息，比方说事务id等。")]),_._v(" "),a("p",[a("code",[_._v("2. 索引信息")]),_._v(" ：")]),_._v(" "),a("p",[_._v("对于 "),a("code",[_._v("行锁")]),_._v(" 来说，需要记录一下加锁的记录是属于哪个索引的。这里也是一个指针。")]),_._v(" "),a("p",[a("code",[_._v("3. 表锁／行锁信息")]),_._v(" ：")]),_._v(" "),a("p",[a("code",[_._v("表锁结构")]),_._v(" 和 "),a("code",[_._v("行锁结构")]),_._v(" 在这个位置的内容是不同的：")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("表锁：")]),_._v(" "),a("p",[_._v("记载着是对哪个表加的锁，还有其他的一些信息。")])]),_._v(" "),a("li",[a("p",[_._v("行锁：")]),_._v(" "),a("p",[_._v("记载了三个重要的信息：")]),_._v(" "),a("ul",[a("li",[a("code",[_._v("Space ID")]),_._v(" ：记录所在表空间。")]),_._v(" "),a("li",[a("code",[_._v("Page Number")]),_._v(" ：记录所在页号。")]),_._v(" "),a("li",[a("code",[_._v("n_bits")]),_._v("：对于行锁来说，一条记录就对应着一个比特位，一个页面中包含很多记录，用不同 的比特位来区分到底是哪一条记录加了锁。为此在行锁结构的末尾放置了一堆比特位，这个"),a("code",[_._v("n_bis")]),_._v("属性代表使用了多少比特位。")])]),_._v(" "),a("blockquote",[a("p",[_._v("n_bits的值一般都比页面中记录条数多一些。主要是为了之后在页面中插入了新记录后 也不至于重新分配锁结构")])])])]),_._v(" "),a("p",[a("code",[_._v("4. type_mode")]),_._v(" ：")]),_._v(" "),a("p",[_._v("这是一个32位的数，被分成了 "),a("code",[_._v("lock_mode")]),_._v(" 、 "),a("code",[_._v("lock_type")]),_._v(" 和 "),a("code",[_._v("rec_lock_type")]),_._v(" 三个部分，如图所示：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714133319666.png",alt:"image-20220714133319666"}})]),_._v(" "),a("ul",[a("li",[_._v("锁的模式（ "),a("code",[_._v("lock_mode")]),_._v(" ），占用低4位，可选的值如下：\n"),a("ul",[a("li",[a("code",[_._v("LOCK_IS")]),_._v(" （十进制的 0 ）：表示共享意向锁，也就是 "),a("code",[_._v("IS锁")]),_._v(" 。")]),_._v(" "),a("li",[a("code",[_._v("LOCK_IX")]),_._v(" （十进制的 1 ）：表示独占意向锁，也就是 "),a("code",[_._v("IX锁")]),_._v(" 。")]),_._v(" "),a("li",[a("code",[_._v("LOCK_S")]),_._v(" （十进制的 2 ）：表示共享锁，也就是 "),a("code",[_._v("S锁")]),_._v(" 。")]),_._v(" "),a("li",[a("code",[_._v("LOCK_X")]),_._v(" （十进制的 3 ）：表示独占锁，也就是 "),a("code",[_._v("X锁")]),_._v(" 。")]),_._v(" "),a("li",[a("code",[_._v("LOCK_AUTO_INC")]),_._v(" （十进制的 4 ）：表示 "),a("code",[_._v("AUTO-INC锁")]),_._v(" 。")])])])]),_._v(" "),a("p",[_._v("在InnoDB存储引擎中，LOCK_IS，LOCK_IX，LOCK_AUTO_INC都算是表级锁的模式，LOCK_S和 LOCK_X既可以算是表级锁的模式，也可以是行级锁的模式。")]),_._v(" "),a("ul",[a("li",[_._v("锁的类型（ "),a("code",[_._v("lock_type")]),_._v(" ），占用第5～8位，不过现阶段只有第5位和第6位被使用：\n"),a("ul",[a("li",[a("code",[_._v("LOCK_TABLE")]),_._v(" （十进制的 16 ），也就是当第5个比特位置为1时，表示表级锁。")]),_._v(" "),a("li",[a("code",[_._v("LOCK_REC")]),_._v("（十进制的 32 ），也就是当第6个比特位置为1时，表示行级锁。")])])]),_._v(" "),a("li",[_._v("行锁的具体类型（ "),a("code",[_._v("rec_lock_type")]),_._v(" ），使用其余的位来表示。只有在 "),a("code",[_._v("lock_type")]),_._v(" 的值为 "),a("code",[_._v("LOCK_REC")]),_._v(" 时，也就是只有在该锁为行级锁时，才会被细分为更多的类型：\n"),a("ul",[a("li",[a("code",[_._v("LOCK_ORDINARY")]),_._v(" （十进制的 0 ）：表示 "),a("code",[_._v("next-key锁")]),_._v(" 。")]),_._v(" "),a("li",[a("code",[_._v("LOCK_GAP")]),_._v(" （十进制的 512 ）：也就是当第10个比特位置为1时，表示 "),a("code",[_._v("gap锁")]),_._v(" 。")]),_._v(" "),a("li",[a("code",[_._v("LOCK_REC_NOT_GAP")]),_._v(" （十进制的 1024 ）：也就是当第11个比特位置为1时，表示正经 "),a("code",[_._v("记录锁")]),_._v(" 。")]),_._v(" "),a("li",[a("code",[_._v("LOCK_INSERT_INTENTION")]),_._v(" （十进制的 2048 ）：也就是当第12个比特位置为1时，表示插入意向锁。其他的类型：还有一些不常用的类型我们就不多说了。")])])]),_._v(" "),a("li",[a("code",[_._v("is_waiting")]),_._v(" 属性呢？基于内存空间的节省，所以把 "),a("code",[_._v("is_waiting")]),_._v(" 属性放到了 "),a("code",[_._v("type_mode")]),_._v(" 这个32 位的数字中：\n"),a("ul",[a("li",[a("code",[_._v("LOCK_WAIT")]),_._v(" （十进制的 256 ） ：当第9个比特位置为 1 时，表示 "),a("code",[_._v("is_waiting")]),_._v(" 为 "),a("code",[_._v("true")]),_._v(" ，也 就是当前事务尚未获取到锁，处在等待状态；当这个比特位为 0 时，表示 "),a("code",[_._v("is_waiting")]),_._v(" 为 "),a("code",[_._v("false")]),_._v(" ，也就是当前事务获取锁成功。")])])])]),_._v(" "),a("p",[a("code",[_._v("5. 其他信息")]),_._v(" ：")]),_._v(" "),a("p",[_._v("为了更好的管理系统运行过程中生成的各种锁结构而设计了各种哈希表和链表。")]),_._v(" "),a("p",[a("code",[_._v("6. 一堆比特位")]),_._v(" ：")]),_._v(" "),a("p",[_._v("如果是 "),a("code",[_._v("行锁结构")]),_._v(" 的话，在该结构末尾还放置了一堆比特位，比特位的数量是由上边提到的 "),a("code",[_._v("n_bits")]),_._v(" 属性 表示的。InnoDB数据页中的每条记录在 "),a("code",[_._v("记录头信息")]),_._v(" 中都包含一个 "),a("code",[_._v("heap_no")]),_._v(" 属性，伪记录 "),a("code",[_._v("Infimum")]),_._v(" 的 "),a("code",[_._v("heap_no")]),_._v(" 值为 0 ， "),a("code",[_._v("Supremum")]),_._v(" 的 "),a("code",[_._v("heap_no")]),_._v(" 值为 1 ，之后每插入一条记录， "),a("code",[_._v("heap_no")]),_._v(" 值就增1。 锁结 构 最后的一堆比特位就对应着一个页面中的记录，一个比特位映射一个 "),a("code",[_._v("heap_no")]),_._v(" ，即一个比特位映射 到页内的一条记录。")]),_._v(" "),a("h2",{attrs:{id:"_5-锁监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-锁监控"}},[_._v("#")]),_._v(" 5. 锁监控")]),_._v(" "),a("p",[_._v("关于MySQL锁的监控，我们一般可以通过检查 InnoDB_row_lock 等状态变量来分析系统上的行锁的争夺情况")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("mysql> show status like 'innodb_row_lock%';\n+-------------------------------+-------+\n| Variable_name                 | Value |\n+-------------------------------+-------+\n| Innodb_row_lock_current_waits | 0     |\n| Innodb_row_lock_time          | 0     |\n| Innodb_row_lock_time_avg      | 0     |\n| Innodb_row_lock_time_max      | 0     |\n| Innodb_row_lock_waits         | 0     |\n+-------------------------------+-------+\n5 rows in set (0.01 sec)\n")])])]),a("p",[_._v("对各个状态量的说明如下：")]),_._v(" "),a("ul",[a("li",[_._v("Innodb_row_lock_current_waits：当前正在等待锁定的数量；")]),_._v(" "),a("li",[a("code",[_._v("Innodb_row_lock_time")]),_._v(" ：从系统启动到现在锁定总时间长度；（等待总时长）")]),_._v(" "),a("li",[a("code",[_._v("Innodb_row_lock_time_avg")]),_._v(" ：每次等待所花平均时间；（等待平均时长）")]),_._v(" "),a("li",[_._v("Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；")]),_._v(" "),a("li",[a("code",[_._v("Innodb_row_lock_waits")]),_._v(" ：系统启动后到现在总共等待的次数；（等待总次数）")])]),_._v(" "),a("p",[_._v("对于这5个状态变量，比较重要的3个见上面（灰色）。")]),_._v(" "),a("p",[_._v("尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手指定优化计划。")]),_._v(" "),a("p",[a("strong",[_._v("其他监控方法：")])]),_._v(" "),a("p",[_._v("MySQL把事务和锁的信息记录在了 "),a("code",[_._v("information_schema")]),_._v(" 库中，涉及到的三张表分别是 "),a("code",[_._v("INNODB_TRX")]),_._v(" 、 "),a("code",[_._v("INNODB_LOCKS")]),_._v(" 和 "),a("code",[_._v("INNODB_LOCK_WAITS")]),_._v(" 。")]),_._v(" "),a("p",[a("code",[_._v("MySQL5.7及之前")]),_._v(" ，可以通过information_schema.INNODB_LOCKS查看事务的锁情况，但只能看到阻塞事 务的锁；如果事务并未被阻塞，则在该表中看不到该事务的锁情况。")]),_._v(" "),a("p",[_._v("MySQL8.0删除了information_schema.INNODB_LOCKS，添加了 "),a("code",[_._v("performance_schema.data_locks")]),_._v(" ，可以通过performance_schema.data_locks查看事务的锁情况，和MySQL5.7及之前不同， performance_schema.data_locks不但可以看到阻塞该事务的锁，还可以看到该事务所持有的锁。")]),_._v(" "),a("p",[_._v("同时，information_schema.INNODB_LOCK_WAITS也被 "),a("code",[_._v("performance_schema.data_lock_waits")]),_._v(" 所代 替。")]),_._v(" "),a("p",[_._v("我们模拟一个锁等待的场景，以下是从这三张表收集的信息")]),_._v(" "),a("p",[_._v("锁等待场景，我们依然使用记录锁中的案例，当事务2进行等待时，查询情况如下：")]),_._v(" "),a("p",[_._v("（1）查询正在被锁阻塞的sql语句。")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("SELECT * FROM information_schema.INNODB_TRX\\G;\n")])])]),a("p",[_._v("重要属性代表含义已在上述中标注。")]),_._v(" "),a("p",[_._v("（2）查询锁等待情况")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("SELECT * FROM data_lock_waits\\G;\n*************************** 1. row ***************************\n\t\t\t\t\t\t\tENGINE: INNODB\n\t\tREQUESTING_ENGINE_LOCK_ID: 139750145405624:7:4:7:139747028690608\nREQUESTING_ENGINE_TRANSACTION_ID: 13845 #被阻塞的事务ID\n\t\t\tREQUESTING_THREAD_ID: 72\n\t\t\tREQUESTING_EVENT_ID: 26\nREQUESTING_OBJECT_INSTANCE_BEGIN: 139747028690608\n\t\tBLOCKING_ENGINE_LOCK_ID: 139750145406432:7:4:7:139747028813248\nBLOCKING_ENGINE_TRANSACTION_ID: 13844 #正在执行的事务ID，阻塞了13845\n\t\t\tBLOCKING_THREAD_ID: 71\n\t\t\tBLOCKING_EVENT_ID: 24\nBLOCKING_OBJECT_INSTANCE_BEGIN: 139747028813248\n1 row in set (0.00 sec)\n")])])]),a("p",[_._v("（3）查询锁的情况")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("mysql > SELECT * from performance_schema.data_locks\\G;\n*************************** 1. row ***************************\nENGINE: INNODB\nENGINE_LOCK_ID: 139750145405624:1068:139747028693520\nENGINE_TRANSACTION_ID: 13847\nTHREAD_ID: 72\nEVENT_ID: 31\nOBJECT_SCHEMA: atguigu\nOBJECT_NAME: user\nPARTITION_NAME: NULL\nSUBPARTITION_NAME: NULL\nINDEX_NAME: NULL\nOBJECT_INSTANCE_BEGIN: 139747028693520\nLOCK_TYPE: TABLE\nLOCK_MODE: IX\nLOCK_STATUS: GRANTED\nLOCK_DATA: NULL\n*************************** 2. row ***************************\nENGINE: INNODB\nENGINE_LOCK_ID: 139750145405624:7:4:7:139747028690608\nENGINE_TRANSACTION_ID: 13847\nTHREAD_ID: 72\nEVENT_ID: 31\nOBJECT_SCHEMA: atguigu\nOBJECT_NAME: user\nPARTITION_NAME: NULL\nSUBPARTITION_NAME: NULL\nINDEX_NAME: PRIMARY\nOBJECT_INSTANCE_BEGIN: 139747028690608\nLOCK_TYPE: RECORD\nLOCK_MODE: X,REC_NOT_GAP\nLOCK_STATUS: WAITING\nLOCK_DATA: 1\n*************************** 3. row ***************************\nENGINE: INNODB\nENGINE_LOCK_ID: 139750145406432:1068:139747028816304\nENGINE_TRANSACTION_ID: 13846\nTHREAD_ID: 71\nEVENT_ID: 28\nOBJECT_SCHEMA: atguigu\nOBJECT_NAME: user\nPARTITION_NAME: NULL\nSUBPARTITION_NAME: NULL\nINDEX_NAME: NULL\nOBJECT_INSTANCE_BEGIN: 139747028816304\nLOCK_TYPE: TABLE\nLOCK_MODE: IX\nLOCK_STATUS: GRANTED\nLOCK_DATA: NULL\n*************************** 4. row ***************************\nENGINE: INNODB\nENGINE_LOCK_ID: 139750145406432:7:4:7:139747028813248\nENGINE_TRANSACTION_ID: 13846\nTHREAD_ID: 71\nEVENT_ID: 28\nOBJECT_SCHEMA: atguigu\nOBJECT_NAME: user\nPARTITION_NAME: NULL\nSUBPARTITION_NAME: NULL\nINDEX_NAME: PRIMARY\nOBJECT_INSTANCE_BEGIN: 139747028813248\nLOCK_TYPE: RECORD\nLOCK_MODE: X,REC_NOT_GAP\nLOCK_STATUS: GRANTED\nLOCK_DATA: 1\n4 rows in set (0.00 sec)\n\nERROR:\nNo query specified\n")])])]),a("p",[_._v("从锁的情况可以看出来，两个事务分别获取了IX锁，我们从意向锁章节可以知道，IX锁互相时兼容的。所 以这里不会等待，但是事务1同样持有X锁，此时事务2也要去同一行记录获取X锁，他们之间不兼容，导 致等待的情况发生。")]),_._v(" "),a("h2",{attrs:{id:"_6-附录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-附录"}},[_._v("#")]),_._v(" 6. 附录")]),_._v(" "),a("p",[a("strong",[_._v("间隙锁加锁规则（共11个案例）")])]),_._v(" "),a("p",[_._v("间隙锁是在可重复读隔离级别下才会生效的： next-key lock 实际上是由间隙锁加行锁实现的，如果切换 到读提交隔离级别 (read-committed) 的话，就好理解了，过程中去掉间隙锁的部分，也就是只剩下行锁 的部分。而在读提交隔离级别下间隙锁就没有了，为了解决可能出现的数据和日志不一致问题，需要把 binlog 格式设置为 row 。也就是说，许多公司的配置为：读提交隔离级别加 binlog_format=row。业务不 需要可重复读的保证，这样考虑到读提交下操作数据的锁范围更小（没有间隙锁），这个选择是合理的。")]),_._v(" "),a("p",[_._v("next-key lock的加锁规则")]),_._v(" "),a("p",[_._v("总结的加锁规则里面，包含了两个 “ “ 原则 ” ” 、两个 “ “ 优化 ” ” 和一个 “bug” 。")]),_._v(" "),a("ol",[a("li",[_._v("原则 1 ：加锁的基本单位是 next-key lock 。 next-key lock 是前开后闭区间。")]),_._v(" "),a("li",[_._v("原则 2 ：查找过程中访问到的对象才会加锁。任何辅助索引上的锁，或者非索引列上的锁，最终 都要回溯到主键上，在主键上也要加一把锁。")]),_._v(" "),a("li",[_._v("优化 1 ：索引上的等值查询，给唯一索引加锁的时候， next-key lock 退化为行锁。也就是说如果 InnoDB扫描的是一个主键、或是一个唯一索引的话，那InnoDB只会采用行锁方式来加锁")]),_._v(" "),a("li",[_._v("优化 2 ：索引上（不一定是唯一索引）的等值查询，向右遍历时且最后一个值不满足等值条件的 时候， next-keylock 退化为间隙锁。")]),_._v(" "),a("li",[_._v("一个 bug ：唯一索引上的范围查询会访问到不满足条件的第一个值为止。")])]),_._v(" "),a("p",[_._v("我们以表test作为例子，建表语句和初始化语句如下：其中id为主键索引")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("CREATE TABLE `test` (\n`id` int(11) NOT NULL,\n`col1` int(11) DEFAULT NULL,\n`col2` int(11) DEFAULT NULL,\nPRIMARY KEY (`id`),\nKEY `c` (`c`)\n) ENGINE=InnoDB;\ninsert into test values(0,0,0),(5,5,5),\n(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n")])])]),a("p",[a("strong",[_._v("案例一：唯一索引等值查询间隙锁")])]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714134603698.png",alt:"image-20220714134603698"}})]),_._v(" "),a("p",[_._v("由于表 test 中没有 id=7 的记录")]),_._v(" "),a("p",[_._v("根据原则 1 ，加锁单位是 next-key lock ， session A 加锁范围就是 (5,10] ； 同时根据优化 2 ，这是一个等 值查询 (id=7) ，而 id=10 不满足查询条件， next-key lock 退化成间隙锁，因此最终加锁的范围是 (5,10)")]),_._v(" "),a("p",[a("strong",[_._v("案例二：非唯一索引等值查询锁")])]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714134623052-16577775838551.png",alt:"image-20220714134623052"}})]),_._v(" "),a("p",[_._v("这里 session A 要给索引 col1 上 col1=5 的这一行加上读锁。")]),_._v(" "),a("ol",[a("li",[_._v("根据原则 1 ，加锁单位是 next-key lock ，左开右闭，5是闭上的，因此会给 (0,5] 加上 next-key lock 。")]),_._v(" "),a("li",[_._v("要注意 c 是普通索引，因此仅访问 c=5 这一条记录是不能马上停下来的（可能有col1=5的其他记 录），需要向右遍历，查到c=10 才放弃。根据原则 2 ，访问到的都要加锁，因此要给 (5,10] 加 next-key lock 。")]),_._v(" "),a("li",[_._v("但是同时这个符合优化 2 ：等值判断，向右遍历，最后一个值不满足 col1=5 这个等值条件，因此退化成间隙锁 (5,10) 。")]),_._v(" "),a("li",[_._v("根据原则 2 ， 只有访问到的对象才会加锁，这个查询使用覆盖索引，并不需要访问主键索引，所以主键索引上没有加任何锁，这就是为什么 session B 的 update 语句可以执行完成。")])]),_._v(" "),a("p",[_._v("但 session C 要插入一个 (7,7,7) 的记录，就会被 session A 的间隙锁 (5,10) 锁住 这个例子说明，锁是加在索引上的。")]),_._v(" "),a("p",[_._v("执行 for update 时，系统会认为你接下来要更新数据，因此会顺便给主键索引上满足条件的行加上行锁。")]),_._v(" "),a("p",[_._v("如果你要用 lock in share mode来给行加读锁避免数据被更新的话，就必须得绕过覆盖索引的优化，因为覆盖索引不会访问主键索引，不会给主键索引上加锁")]),_._v(" "),a("p",[a("strong",[_._v("案例三：主键索引范围查询锁")])]),_._v(" "),a("p",[_._v("上面两个例子是等值查询的，这个例子是关于范围查询的，也就是说下面的语句")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("select * from test where id=10 for update\nselect * from tets where id>=10 and id<11 for update;\n")])])]),a("p",[_._v("这两条查语句肯定是等价的，但是它们的加锁规则不太一样")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714134742049.png",alt:"image-20220714134742049"}})]),_._v(" "),a("ol",[a("li",[_._v("开始执行的时候，要找到第一个 id=10 的行，因此本该是 next-key lock(5,10] 。 根据优化 1 ，主键 id 上的等值条件，退化成行锁，只加了 id=10 这一行的行锁。")]),_._v(" "),a("li",[_._v("它是范围查询， 范围查找就往后继续找，找到 id=15 这一行停下来，不满足条件，因此需要加 next-key lock(10,15] 。")])]),_._v(" "),a("p",[_._v("session A 这时候锁的范围就是主键索引上，行锁 id=10 和 next-key lock(10,15] 。"),a("strong",[_._v("首次 session A 定位查找 id=10 的行的时候，是当做等值查询来判断的，而向右扫描到 id=15 的时候，用的是范围查询判断。")])]),_._v(" "),a("p",[a("strong",[_._v("案例四：非唯一索引范围查询锁")])]),_._v(" "),a("p",[_._v("与案例三不同的是，案例四中查询语句的 where 部分用的是字段 c ，它是普通索引")]),_._v(" "),a("p",[_._v("这两条查语句肯定是等价的，但是它们的加锁规则不太一样")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714134822160.png",alt:"image-20220714134822160"}})]),_._v(" "),a("p",[_._v("在第一次用 col1=10 定位记录的时候，索引 c 上加了 (5,10] 这个 next-key lock 后，由于索引 col1 是非唯 一索引，没有优化规则，也就是说不会蜕变为行锁，因此最终 sesion A 加的锁是，索引 c 上的 (5,10] 和 (10,15] 这两个 next-keylock 。")]),_._v(" "),a("p",[_._v("这里需要扫描到 col1=15 才停止扫描，是合理的，因为 InnoDB 要扫到 col1=15 ，才知道不需要继续往后找了。")]),_._v(" "),a("p",[a("strong",[_._v("案例五：唯一索引范围查询锁 bug")])]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714134846740.png",alt:"image-20220714134846740"}})]),_._v(" "),a("p",[_._v("session A 是一个范围查询，按照原则 1 的话，应该是索引 id 上只加 (10,15] 这个 next-key lock ，并且因 为 id 是唯一键，所以循环判断到 id=15 这一行就应该停止了。")]),_._v(" "),a("p",[_._v("但是实现上， InnoDB 会往前扫描到第一个不满足条件的行为止，也就是 id=20 。而且由于这是个范围扫描，因此索引 id 上的 (15,20] 这个 next-key lock 也会被锁上。照理说，这里锁住 id=20 这一行的行为，其实是没有必要的。因为扫描到 id=15 ，就可以确定不用往后再找了。")]),_._v(" "),a("p",[a("strong",[_._v('案例六：非唯一索引上存在 " " 等值 " " 的例子')])]),_._v(" "),a("p",[_._v("这里，我给表 t 插入一条新记录：insert into t values(30,10,30);也就是说，现在表里面有两个c=10的行")]),_._v(" "),a("p",[a("strong",[_._v("但是它们的主键值 id 是不同的（分别是 10 和 30 ），因此这两个c=10 的记录之间，也是有间隙的。")])]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714134923414.png",alt:"image-20220714134923414"}})]),_._v(" "),a("p",[_._v("这次我们用 delete 语句来验证。注意， delete 语句加锁的逻辑，其实跟 select ... for update 是类似的， 也就是我在文章开始总结的两个 “ 原则 ” 、两个 “ 优化 ” 和一个 “bug” 。")]),_._v(" "),a("p",[_._v("这时， session A 在遍历的时候，先访问第一个 col1=10 的记录。同样地，根据原则 1 ，这里加的是 (col1=5,id=5) 到 (col1=10,id=10) 这个 next-key lock 。")]),_._v(" "),a("p",[_._v("由于c是普通索引，所以继续向右查找，直到碰到 (col1=15,id=15) 这一行循环才结束。根据优化 2 ，这是 一个等值查询，向右查找到了不满足条件的行，所以会退化成 (col1=10,id=10) 到 (col1=15,id=15) 的间隙锁。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714134945012.png",alt:"image-20220714134945012"}})]),_._v(" "),a("p",[_._v("这个 delete 语句在索引 c 上的加锁范围，就是上面图中蓝色区域覆盖的部分。这个蓝色区域左右两边都 是虚线，表示开区间，即 (col1=5,id=5) 和 (col1=15,id=15) 这两行上都没有锁")]),_._v(" "),a("p",[a("strong",[_._v("案例七： limit 语句加锁")])]),_._v(" "),a("p",[_._v("例子 6 也有一个对照案例，场景如下所示：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714135007118.png",alt:"image-20220714135007118"}})]),_._v(" "),a("p",[_._v("session A 的 delete 语句加了 limit 2 。你知道表 t 里 c=10 的记录其实只有两条，因此加不加 limit 2 ，删除的效果都是一样的。但是加锁效果却不一样")]),_._v(" "),a("p",[_._v("这是因为，案例七里的 delete 语句明确加了 limit 2 的限制，因此在遍历到 (col1=10, id=30) 这一行之后， 满足条件的语句已经有两条，循环就结束了。因此，索引 col1 上的加锁范围就变成了从（ col1=5,id=5) 到（ col1=10,id=30) 这个前开后闭区间，如下图所示：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714135025045-16577778257713.png",alt:"image-20220714135025045"}})]),_._v(" "),a("p",[_._v("这个例子对我们实践的指导意义就是， 在删除数据的时候尽量加 limit 。")]),_._v(" "),a("p",[_._v("这样不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围。")]),_._v(" "),a("p",[a("strong",[_._v("案例八：一个死锁的例子")])]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714135047760.png",alt:"image-20220714135047760"}})]),_._v(" "),a("ol",[a("li",[_._v("session A 启动事务后执行查询语句加 lock in share mode ，在索引 col1 上加了 next-keylock(5,10] 和 间隙锁 (10,15) （索引向右遍历退化为间隙锁）；")]),_._v(" "),a("li",[_._v("session B 的 update 语句也要在索引 c 上加 next-key lock(5,10] ，进入锁等待； 实际上分成了两步， 先是加 (5,10) 的间隙锁，加锁成功；然后加 col1=10 的行锁，因为sessionA上已经给这行加上了读 锁，此时申请死锁时会被阻塞")]),_._v(" "),a("li",[_._v("然后 session A 要再插入 (8,8,8) 这一行，被 session B 的间隙锁锁住。由于出现了死锁， InnoDB 让 session B 回滚")])]),_._v(" "),a("p",[a("strong",[_._v("案例九：order by索引排序的间隙锁1")])]),_._v(" "),a("p",[_._v("如下面一条语句")]),_._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("begin;\nselect * from test where id>9 and id<12 order by id desc for update;\n")])])]),a("p",[_._v("下图为这个表的索引id的示意图。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714135130668.png",alt:"image-20220714135130668"}})]),_._v(" "),a("ol",[a("li",[_._v("首先这个查询语句的语义是 order by id desc ，要拿到满足条件的所有行，优化器必须先找到 “ 第 一个 id<12 的值 ” 。")]),_._v(" "),a("li",[_._v("这个过程是通过索引树的搜索过程得到的，在引擎内部，其实是要找到 id=12 的这个值，只是最终 没找到，但找到了 (10,15) 这个间隙。（ id=15 不满足条件，所以 next-key lock 退化为了间隙锁 (10, 15) 。）")]),_._v(" "),a("li",[_._v("然后向左遍历，在遍历过程中，就不是等值查询了，会扫描到 id=5 这一行，又因为区间是左开右 闭的，所以会加一个next-key lock (0,5] 。 也就是说，在执行过程中，通过树搜索的方式定位记录 的时候，用的是 “ 等值查询 ” 的方法。")])]),_._v(" "),a("p",[a("strong",[_._v("案例十：order by索引排序的间隙锁2")])]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714135206504.png",alt:"image-20220714135206504"}})]),_._v(" "),a("ol",[a("li",[a("p",[_._v("由于是 order by col1 desc ，第一个要定位的是索引 col1 上 “ 最右边的 ”col1=20 的行。这是一个非唯一索引的等值查询：")]),_._v(" "),a("p",[_._v("左开右闭区间，首先加上 next-key lock (15,20] 。 向右遍历，col1=25不满足条件，退化为间隙锁 所以会 加上间隙锁(20,25) 和 next-key lock (15,20] 。")])]),_._v(" "),a("li",[a("p",[_._v("在索引 col1 上向左遍历，要扫描到 col1=10 才停下来。同时又因为左开右闭区间，所以 next-key lock 会加到 (5,10] ，这正是阻塞session B 的 insert 语句的原因。")])]),_._v(" "),a("li",[a("p",[_._v("在扫描过程中， col1=20 、 col1=15 、 col1=10 这三行都存在值，由于是 select * ，所以会在主键 id 上加三个行锁。 因此， session A 的 select 语句锁的范围就是：")]),_._v(" "),a("ol",[a("li",[_._v("索引 col1 上 (5, 25) ；")]),_._v(" "),a("li",[_._v("主键索引上 id=15 、 20 两个行锁。")])])])]),_._v(" "),a("p",[a("strong",[_._v("案例十一：update修改数据的例子-先插入后删除")])]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714135300189.png",alt:"image-20220714135300189"}})]),_._v(" "),a("p",[_._v("注意：根据 col1>5 查到的第一个记录是 col1=10 ，因此不会加 (0,5] 这个 next-key lock 。")]),_._v(" "),a("p",[_._v("session A 的加锁范围是索引 col1 上的 (5,10] 、 (10,15] 、 (15,20] 、 (20,25] 和(25,supremum] 。")]),_._v(" "),a("p",[_._v("之后 session B 的第一个 update 语句，要把 col1=5 改成 col1=1 ，你可以理解为两步：")]),_._v(" "),a("ol",[a("li",[_._v("插入 (col1=1, id=5) 这个记录；")]),_._v(" "),a("li",[_._v("删除 (col1=5, id=5) 这个记录。")])]),_._v(" "),a("p",[_._v("通过这个操作， session A 的加锁范围变成了图 7 所示的样子:")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220714135333089.png",alt:"image-20220714135333089"}})]),_._v(" "),a("p",[_._v("好，接下来 session B 要执行 update t set col1 = 5 where col1 = 1 这个语句了，一样地可以拆成两步：")]),_._v(" "),a("ol",[a("li",[_._v("插入 (col1=5, id=5) 这个记录；")]),_._v(" "),a("li",[_._v("删除 (col1=1, id=5) 这个记录。 第一步试图在已经加了间隙锁的 (1,10) 中插入数据，所以就被堵住了。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);