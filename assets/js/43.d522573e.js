(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{369:function(a,t,s){"use strict";s.r(t);var _=s(7),e=Object(_.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("配套视频参考："),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1iq4y1u7vj?p=1&vd_source=cea816a08805c218ac4390ae9b61ae31",target:"_blank",rel:"noopener noreferrer"}},[a._v("MySQL数据库天花板--康师傅"),t("OutboundLink")],1)]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("MySQL从5.0版本开始支持存储过程和函数。存储过程和函数能够将复杂的SQL逻辑封装在一起，应用程序无须关注存储过程和函数内部复杂的SQL逻辑，而只需要简单地调用存储过程和函数即可。")]),a._v(" "),t("h2",{attrs:{id:"_1-存储过程概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-存储过程概述"}},[a._v("#")]),a._v(" 1. 存储过程概述")]),a._v(" "),t("h3",{attrs:{id:"_1-1-理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-理解"}},[a._v("#")]),a._v(" 1.1 理解")]),a._v(" "),t("p",[t("strong",[a._v("含义")]),a._v("：存储过程的英文是 "),t("code",[a._v("Stored Procedure")]),a._v("。它的思想很简单，就是一组经过"),t("code",[a._v("预先编译")]),a._v("的 SQL 语句的封装。")]),a._v(" "),t("p",[a._v("执行过程：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。")]),a._v(" "),t("p",[t("strong",[a._v("好处")]),a._v("：")]),a._v(" "),t("p",[a._v("1、简化操作，提高了sql语句的重用性，减少了开发程序员的压力\n2、减少操作过程中的失误，提高效率\n3、减少网络传输量（客户端不需要把所有的 SQL 语句通过网络发给服务器）\n4、减少了 SQL 语句暴露在网上的风险，也提高了数据查询的安全性")]),a._v(" "),t("p",[t("strong",[a._v("和视图、函数的对比")]),a._v("：")]),a._v(" "),t("p",[a._v("它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是"),t("code",[a._v("虚拟表")]),a._v("，通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以"),t("code",[a._v("直接操作底层数据表")]),a._v("，相比于面向集合的操作方式，能够实现一些更复杂的数据处理。")]),a._v(" "),t("p",[a._v("一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于函数，存储过程是"),t("code",[a._v("没有返回值")]),a._v("的。")]),a._v(" "),t("h3",{attrs:{id:"_1-2-分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-分类"}},[a._v("#")]),a._v(" 1.2 分类")]),a._v(" "),t("p",[a._v("存储过程的参数类型可以是IN、OUT和INOUT。根据这点分类如下：")]),a._v(" "),t("p",[a._v("1、没有参数（无参数无返回）\n2、仅仅带 IN 类型（有参数无返回）\n3、仅仅带 OUT 类型（无参数有返回）\n4、既带 IN 又带 OUT（有参数有返回）\n5、带 INOUT（有参数有返回）")]),a._v(" "),t("p",[a._v("注意：IN、OUT、INOUT 都可以在一个存储过程中带多个。")]),a._v(" "),t("h2",{attrs:{id:"_2-创建存储过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建存储过程"}},[a._v("#")]),a._v(" 2. 创建存储过程")]),a._v(" "),t("h3",{attrs:{id:"_2-1-语法分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-语法分析"}},[a._v("#")]),a._v(" 2.1 语法分析")]),a._v(" "),t("p",[a._v("语法：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)\n[characteristics ...]\nBEGIN\n\t存储过程体\n\nEND\n")])])]),t("p",[a._v("类似于Java中的方法：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("修饰符 返回类型 方法名(参数类型 参数名,...){\n\n\t方法体;\n}\n")])])]),t("p",[a._v("说明：")]),a._v(" "),t("p",[a._v("1、参数前面的符号的意思")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("IN")]),a._v("：当前参数为输入参数，也就是表示入参；")]),a._v(" "),t("p",[a._v("存储过程只是读取这个参数的值。如果没有定义参数种类，"),t("code",[a._v("默认就是 IN")]),a._v("，表示输入参数。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("OUT")]),a._v("：当前参数为输出参数，也就是表示出参；")]),a._v(" "),t("p",[a._v("执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("INOUT")]),a._v("：当前参数既可以为输入参数，也可以为输出参数。")])])]),a._v(" "),t("p",[a._v("2、形参类型可以是 MySQL数据库中的任意类型。")]),a._v(" "),t("p",[a._v("3、"),t("code",[a._v("characteristics")]),a._v(" 表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("LANGUAGE SQL\n| [NOT] DETERMINISTIC\n| { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n| SQL SECURITY { DEFINER | INVOKER }\n| COMMENT 'string'\n")])])]),t("ul",[t("li",[t("code",[a._v("LANGUAGE SQL")]),a._v("：说明存储过程执行体是由SQL语句组成的，当前系统支持的语言为SQL。")]),a._v(" "),t("li",[t("code",[a._v("[NOT] DETERMINISTIC")]),a._v("：指明存储过程执行的结果是否确定。DETERMINISTIC表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。NOT DETERMINISTIC表示结果是不确定的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为NOT DETERMINISTIC。")]),a._v(" "),t("li",[t("code",[a._v("{ CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }")]),a._v("：指明子程序使用SQL语句的限制。\n"),t("ul",[t("li",[a._v("CONTAINS SQL表示当前存储过程的子程序包含SQL语句，但是并不包含读写数据的SQL语句；")]),a._v(" "),t("li",[a._v("NO SQL表示当前存储过程的子程序中不包含任何SQL语句；")]),a._v(" "),t("li",[a._v("READS SQL DATA表示当前存储过程的子程序中包含读数据的SQL语句；")]),a._v(" "),t("li",[a._v("MODIFIES SQL DATA表示当前存储过程的子程序中包含写数据的SQL语句。")]),a._v(" "),t("li",[a._v("默认情况下，系统会指定为CONTAINS SQL。")])])]),a._v(" "),t("li",[t("code",[a._v("SQL SECURITY { DEFINER | INVOKER }")]),a._v("：执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程。\n"),t("ul",[t("li",[t("code",[a._v("DEFINER")]),a._v("表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；")]),a._v(" "),t("li",[t("code",[a._v("INVOKER")]),a._v("表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。")]),a._v(" "),t("li",[a._v("如果没有设置相关的值，则MySQL默认指定值为DEFINER。")])])]),a._v(" "),t("li",[t("code",[a._v("COMMENT 'string'")]),a._v("：注释信息，可以用来描述存储过程。")])]),a._v(" "),t("p",[a._v("4、存储过程体中可以有多条 SQL 语句，如果仅仅一条SQL 语句，则可以省略 BEGIN 和 END")]),a._v(" "),t("p",[a._v("编写存储过程并不是一件简单的事情，可能存储过程中需要复杂的 SQL 语句。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("1. BEGIN…END：BEGIN…END 中间包含了多个语句，每个语句都以（;）号为结束符。\n2. DECLARE：DECLARE 用来声明变量，使用的位置在于 BEGIN…END 语句中间，而且需要在其他语句使用之前进行变量的声明。\n3. SET：赋值语句，用于对变量进行赋值。\n4. SELECT… INTO：把从数据表中查询的结果存放到变量中，也就是为变量赋值。\n")])])]),t("p",[a._v("5、需要设置新的结束标记")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER 新的结束标记\n")])])]),t("p",[a._v("因为MySQL默认的语句结束符号为分号‘;’。为了避免与存储过程中SQL语句结束符相冲突，需要使用DELIMITER改变存储过程的结束符。")]),a._v(" "),t("p",[a._v("比如：“DELIMITER //”语句的作用是将MySQL的结束符设置为//，并以“END //”结束存储过程。存储过程定义完毕之后再使用“DELIMITER ;”恢复默认结束符。DELIMITER也可以指定其他符号作为结束符。")]),a._v(" "),t("p",[a._v("当使用DELIMITER命令时，应该避免使用反斜杠（‘\\’）字符，因为反斜线是MySQL的转义字符。")]),a._v(" "),t("p",[a._v("示例：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER $\n\nCREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)\n[characteristics ...]\nBEGIN\n\tsql语句1;\n\tsql语句2;\n\nEND $\n")])])]),t("h3",{attrs:{id:"_2-2-代码举例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-代码举例"}},[a._v("#")]),a._v(" 2.2 代码举例")]),a._v(" "),t("p",[a._v("举例1：创建存储过程select_all_data()，查看 emps 表的所有数据")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER $\n\nCREATE PROCEDURE select_all_data()\nBEGIN\n\tSELECT * FROM emps;\n\t\nEND $\n\nDELIMITER ;\n")])])]),t("p",[a._v("举例2：创建存储过程avg_employee_salary()，返回所有员工的平均工资")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE avg_employee_salary ()\nBEGIN\n\tSELECT AVG(salary) AS avg_salary FROM emps;\nEND //\n\nDELIMITER ;\n")])])]),t("p",[a._v("举例3：创建存储过程show_max_salary()，用来查看“emps”表的最高薪资值。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("CREATE PROCEDURE show_max_salary()\n\tLANGUAGE SQL\n\tNOT DETERMINISTIC\n\tCONTAINS SQL\n\tSQL SECURITY DEFINER\n\tCOMMENT '查看最高薪资'\n\tBEGIN\n\t\tSELECT MAX(salary) FROM emps;\n\tEND //\n\nDELIMITER ;\n")])])]),t("p",[a._v("举例4：创建存储过程show_min_salary()，查看“emps”表的最低薪资值。并将最低薪资通过OUT参数“ms”输出")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE show_min_salary(OUT ms DOUBLE)\n\tBEGIN\n\t\tSELECT MIN(salary) INTO ms FROM emps;\n\tEND //\n\nDELIMITER ;\n")])])]),t("p",[a._v("举例5：创建存储过程show_someone_salary()，查看“emps”表的某个员工的薪资，并用IN参数empname输入员工姓名。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE show_someone_salary(IN empname VARCHAR(20))\n\tBEGIN\n\t\tSELECT salary FROM emps WHERE ename = empname;\n\tEND //\n\nDELIMITER ;\n")])])]),t("p",[a._v("举例6：创建存储过程show_someone_salary2()，查看“emps”表的某个员工的薪资，并用IN参数empname输入员工姓名，用OUT参数empsalary输出员工薪资。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE show_someone_salary2(IN empname VARCHAR(20),OUT empsalary DOUBLE)\n\tBEGIN\n\t\tSELECT salary INTO empsalary FROM emps WHERE ename = empname;\n\tEND //\n\nDELIMITER ;\n")])])]),t("p",[a._v("举例7：创建存储过程show_mgr_name()，查询某个员工领导的姓名，并用INOUT参数“empname”输入员工姓名，输出领导的姓名。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE show_mgr_name(INOUT empname VARCHAR(20))\n\tBEGIN\n\t\tSELECT ename INTO empname FROM emps\n\t\tWHERE eid = (SELECT MID FROM emps WHERE ename=empname);\n\tEND //\n\nDELIMITER ;\n")])])]),t("h2",{attrs:{id:"_3-调用存储过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-调用存储过程"}},[a._v("#")]),a._v(" 3. 调用存储过程")]),a._v(" "),t("h3",{attrs:{id:"_3-1-调用格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-调用格式"}},[a._v("#")]),a._v(" 3.1 调用格式")]),a._v(" "),t("p",[a._v("存储过程有多种调用方法。存储过程必须使用CALL语句调用，并且存储过程和数据库相关，如果要执行其他数据库中的存储过程，需要指定数据库名称，例如CALL dbname.procname。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("CALL 存储过程名(实参列表)\n")])])]),t("p",[t("strong",[a._v("格式：")])]),a._v(" "),t("p",[a._v("1、调用in模式的参数：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("CALL sp1('值');\n")])])]),t("p",[a._v("2、调用out模式的参数：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SET @name;\nCALL sp1(@name);\nSELECT @name;\n")])])]),t("p",[a._v("3、调用inout模式的参数：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SET @name=值;\nCALL sp1(@name);\nSELECT @name;\n")])])]),t("h3",{attrs:{id:"_3-2-代码举例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-代码举例"}},[a._v("#")]),a._v(" 3.2 代码举例")]),a._v(" "),t("p",[t("strong",[a._v("举例1：")])]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE CountProc(IN sid INT,OUT num INT)\nBEGIN\n\tSELECT COUNT(*) INTO num FROM fruits \n\tWHERE s_id = sid;\nEND //\n\nDELIMITER ;\n")])])]),t("p",[a._v("调用存储过程：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("mysql> CALL CountProc (101, @num);\nQuery OK, 1 row affected (0.00 sec)\n")])])]),t("p",[a._v("查看返回结果：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("mysql> SELECT @num;\n")])])]),t("p",[a._v("该存储过程返回了指定 s_id=101 的水果商提供的水果种类，返回值存储在num变量中，使用SELECT查看，返回结果为3。")]),a._v(" "),t("p",[a._v("**举例2：**创建存储过程，实现累加运算，计算 1+2+…+n 等于多少。具体的代码如下：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER //\nCREATE PROCEDURE `add_num`(IN n INT)\nBEGIN\n       DECLARE i INT;\n       DECLARE sum INT;\n       \n       SET i = 1;\n       SET sum = 0;\n       WHILE i <= n DO\n              SET sum = sum + i;\n              SET i = i +1;\n       END WHILE;\n       SELECT sum;\nEND //\nDELIMITER ;\n")])])]),t("p",[a._v("如果你用的是 Navicat 工具，那么在编写存储过程的时候，Navicat 会自动设置 DELIMITER 为其他符号，我们不需要再进行 DELIMITER 的操作。")]),a._v(" "),t("p",[a._v("直接使用 "),t("code",[a._v("CALL add_num(50);")]),a._v("即可。这里我传入的参数为 50，也就是统计 1+2+…+50 的积累之和。")]),a._v(" "),t("h3",{attrs:{id:"_3-3-如何调试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-如何调试"}},[a._v("#")]),a._v(" 3.3 如何调试")]),a._v(" "),t("p",[a._v("在 MySQL 中，存储过程不像普通的编程语言（比如 VC++、Java 等）那样有专门的集成开发环境。因此，你可以通过 SELECT 语句，把程序执行的中间结果查询出来，来调试一个 SQL 语句的正确性。调试成功之后，把 SELECT 语句后移到下一个 SQL 语句之后，再调试下一个 SQL 语句。这样"),t("code",[a._v("逐步推进")]),a._v("，就可以完成对存储过程中所有操作的调试了。当然，你也可以把存储过程中的 SQL 语句复制出来，逐段单独调试。")]),a._v(" "),t("h2",{attrs:{id:"_4-存储函数的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-存储函数的使用"}},[a._v("#")]),a._v(" 4. 存储函数的使用")]),a._v(" "),t("p",[a._v("前面学习了很多函数，使用这些函数可以对数据进行的各种处理操作，极大地提高用户对数据库的管理效率。MySQL支持自定义函数，定义好之后，调用方式与调用MySQL预定义的系统函数一样。")]),a._v(" "),t("h3",{attrs:{id:"_4-1-语法分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-语法分析"}},[a._v("#")]),a._v(" 4.1 语法分析")]),a._v(" "),t("p",[a._v("学过的函数：LENGTH、SUBSTR、CONCAT等")]),a._v(" "),t("p",[a._v("语法格式：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("CREATE FUNCTION 函数名(参数名 参数类型,...) \nRETURNS 返回值类型\n[characteristics ...]\nBEGIN\n\t函数体   #函数体中肯定有 RETURN 语句\n\nEND\n")])])]),t("p",[a._v("说明：")]),a._v(" "),t("p",[a._v("1、参数列表：指定参数为IN、OUT或INOUT只对PROCEDURE是合法的，FUNCTION中总是默认为IN参数。")]),a._v(" "),t("p",[a._v("2、RETURNS type 语句表示函数返回数据的类型；")]),a._v(" "),t("p",[a._v("RETURNS子句只能对FUNCTION做指定，对函数而言这是"),t("code",[a._v("强制")]),a._v("的。它用来指定函数的返回类型，而且函数体必须包含一个"),t("code",[a._v("RETURN value")]),a._v("语句。")]),a._v(" "),t("p",[a._v("3、characteristic 创建函数时指定的对函数的约束。取值与创建存储过程时相同，这里不再赘述。")]),a._v(" "),t("p",[a._v("4、函数体也可以用BEGIN…END来表示SQL代码的开始和结束。如果函数体只有一条语句，也可以省略BEGIN…END。")]),a._v(" "),t("h3",{attrs:{id:"_4-2-调用存储函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-调用存储函数"}},[a._v("#")]),a._v(" 4.2 调用存储函数")]),a._v(" "),t("p",[a._v("在MySQL中，存储函数的使用方法与MySQL内部函数的使用方法是一样的。换言之，用户自己定义的存储函数与MySQL内部函数是一个性质的。区别在于，存储函数是"),t("code",[a._v("用户自己定义")]),a._v("的，而内部函数是MySQL的"),t("code",[a._v("开发者定义")]),a._v("的。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT 函数名(实参列表)\n")])])]),t("h3",{attrs:{id:"_4-3-代码举例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-代码举例"}},[a._v("#")]),a._v(" 4.3 代码举例")]),a._v(" "),t("p",[t("strong",[a._v("举例1：")])]),a._v(" "),t("p",[a._v("创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER //\n\nCREATE FUNCTION email_by_name()\nRETURNS VARCHAR(25)\nDETERMINISTIC\nCONTAINS SQL\nBEGIN\n\tRETURN (SELECT email FROM employees WHERE last_name = 'Abel');\nEND //\n\nDELIMITER ;\n")])])]),t("p",[a._v("调用：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT email_by_name();\n")])])]),t("p",[t("strong",[a._v("举例2：")])]),a._v(" "),t("p",[a._v("创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，并返回，数据类型为字符串型。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER //\n\nCREATE FUNCTION email_by_id(emp_id INT)\nRETURNS VARCHAR(25)\nDETERMINISTIC\nCONTAINS SQL\nBEGIN\n\tRETURN (SELECT email FROM employees WHERE employee_id = emp_id);\nEND //\n\nDELIMITER ;\n")])])]),t("p",[a._v("调用：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SET @emp_id = 102;\nSELECT email_by_id(102);\n")])])]),t("p",[t("strong",[a._v("举例3：")])]),a._v(" "),t("p",[a._v("创建存储函数count_by_id()，参数传入dept_id，该函数查询dept_id部门的员工人数，并返回，数据类型为整型。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DELIMITER //\n\nCREATE FUNCTION count_by_id(dept_id INT)\nRETURNS INT\n\tLANGUAGE SQL\n\tNOT DETERMINISTIC\n\tREADS SQL DATA\n\tSQL SECURITY DEFINER\n\tCOMMENT '查询部门平均工资'\nBEGIN\n\tRETURN (SELECT COUNT(*) FROM employees WHERE department_id = dept_id);\n\t\nEND //\n\nDELIMITER ;\n")])])]),t("p",[a._v("调用：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SET @dept_id = 50;\nSELECT count_by_id(@dept_id);\n")])])]),t("p",[t("strong",[a._v("注意：")])]),a._v(" "),t("p",[a._v("若在创建存储函数中报错“"),t("code",[a._v("you might want to use the less safe log_bin_trust_function_creators variable")]),a._v("”，有两种处理方法：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("方式1：加上必要的函数特性“[NOT] DETERMINISTIC”和“{CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA}”")])]),a._v(" "),t("li",[t("p",[a._v("方式2：")])])]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("mysql> SET GLOBAL log_bin_trust_function_creators = 1;\n")])])]),t("h3",{attrs:{id:"_4-4-对比存储函数和存储过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-对比存储函数和存储过程"}},[a._v("#")]),a._v(" 4.4 对比存储函数和存储过程")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th"),a._v(" "),t("th",[a._v("关键字")]),a._v(" "),t("th",[a._v("调用语法")]),a._v(" "),t("th",[a._v("返回值")]),a._v(" "),t("th",[a._v("应用场景")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("存储过程")]),a._v(" "),t("td",[a._v("PROCEDURE")]),a._v(" "),t("td",[a._v("CALL 存储过程()")]),a._v(" "),t("td",[a._v("理解为有0个或多个")]),a._v(" "),t("td",[a._v("一般用于更新")])]),a._v(" "),t("tr",[t("td",[a._v("存储函数")]),a._v(" "),t("td",[a._v("FUNCTION")]),a._v(" "),t("td",[a._v("SELECT 函数()")]),a._v(" "),t("td",[a._v("只能是一个")]),a._v(" "),t("td",[a._v("一般用于查询结果为一个值并返回时")])])])]),a._v(" "),t("p",[a._v("此外，"),t("strong",[a._v("存储函数可以放在查询语句中使用，存储过程不行")]),a._v("。反之，存储过程的功能更加强大，包括能够执行对表的操作（比如创建表，删除表等）和事务操作，这些功能是存储函数不具备的。")]),a._v(" "),t("h2",{attrs:{id:"_5-存储过程和函数的查看、修改、删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-存储过程和函数的查看、修改、删除"}},[a._v("#")]),a._v(" 5. 存储过程和函数的查看、修改、删除")]),a._v(" "),t("h3",{attrs:{id:"_5-1-查看"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-查看"}},[a._v("#")]),a._v(" 5.1 查看")]),a._v(" "),t("p",[a._v("创建完之后，怎么知道我们创建的存储过程、存储函数是否成功了呢？")]),a._v(" "),t("p",[a._v("MySQL存储了存储过程和函数的状态信息，用户可以使用SHOW STATUS语句或SHOW CREATE语句来查看，也可直接从系统的information_schema数据库中查询。这里介绍3种方法。")]),a._v(" "),t("p",[t("strong",[a._v("1. 使用SHOW CREATE语句查看存储过程和函数的创建信息")])]),a._v(" "),t("p",[a._v("基本语法结构如下：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SHOW CREATE {PROCEDURE | FUNCTION} 存储过程名或函数名\n")])])]),t("p",[a._v("举例：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SHOW CREATE FUNCTION test_db.CountProc \\G\n")])])]),t("p",[t("strong",[a._v("2. 使用SHOW STATUS语句查看存储过程和函数的状态信息")])]),a._v(" "),t("p",[a._v("基本语法结构如下：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SHOW {PROCEDURE | FUNCTION} STATUS [LIKE 'pattern']\n")])])]),t("p",[a._v("这个语句返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。")]),a._v(" "),t("p",[a._v("[LIKE 'pattern']：匹配存储过程或函数的名称，可以省略。当省略不写时，会列出MySQL数据库中存在的所有存储过程或函数的信息。\n举例：SHOW STATUS语句示例，代码如下：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("mysql> SHOW PROCEDURE STATUS LIKE 'SELECT%' \\G \n*************************** 1. row ***************************\n                  Db: test_db\n                Name: SelectAllData\n                Type: PROCEDURE\n             Definer: root@localhost\n            Modified: 2021-10-16 15:55:07\n             Created: 2021-10-16 15:55:07\n       Security_type: DEFINER\n             Comment: \ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_general_ci\n  Database Collation: utf8mb4_general_ci\n1 row in set (0.00 sec)\n")])])]),t("p",[t("strong",[a._v("3. 从information_schema.Routines表中查看存储过程和函数的信息")])]),a._v(" "),t("p",[a._v("MySQL中存储过程和函数的信息存储在information_schema数据库下的Routines表中。可以通过查询该表的记录来查询存储过程和函数的信息。其基本语法形式如下：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT * FROM information_schema.Routines\nWHERE ROUTINE_NAME='存储过程或函数的名' [AND ROUTINE_TYPE = {'PROCEDURE|FUNCTION'}];\n")])])]),t("p",[a._v("说明：如果在MySQL数据库中存在存储过程和函数名称相同的情况，最好指定ROUTINE_TYPE查询条件来指明查询的是存储过程还是函数。")]),a._v(" "),t("p",[a._v("举例：从Routines表中查询名称为CountProc的存储函数的信息，代码如下：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT * FROM information_schema.Routines\nWHERE ROUTINE_NAME='count_by_id'　AND　ROUTINE_TYPE = 'FUNCTION' \\G\n")])])]),t("h3",{attrs:{id:"_5-2-修改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-修改"}},[a._v("#")]),a._v(" 5.2 修改")]),a._v(" "),t("p",[a._v("修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特性。使用ALTER语句实现。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("ALTER {PROCEDURE | FUNCTION} 存储过程或函数的名 [characteristic ...]\n")])])]),t("p",[a._v("其中，characteristic指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有不同。")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("{ CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n| SQL SECURITY { DEFINER | INVOKER }\n| COMMENT 'string'\n")])])]),t("ul",[t("li",[t("code",[a._v("CONTAINS SQL")]),a._v("，表示子程序包含SQL语句，但不包含读或写数据的语句。")]),a._v(" "),t("li",[t("code",[a._v("NO SQL")]),a._v("，表示子程序中不包含SQL语句。")]),a._v(" "),t("li",[t("code",[a._v("READS SQL DATA")]),a._v("，表示子程序中包含读数据的语句。")]),a._v(" "),t("li",[t("code",[a._v("MODIFIES SQL DATA")]),a._v("，表示子程序中包含写数据的语句。")]),a._v(" "),t("li",[t("code",[a._v("SQL SECURITY { DEFINER | INVOKER }")]),a._v("，指明谁有权限来执行。\n"),t("ul",[t("li",[t("code",[a._v("DEFINER")]),a._v("，表示只有定义者自己才能够执行。")]),a._v(" "),t("li",[t("code",[a._v("INVOKER")]),a._v("，表示调用者可以执行。")])])]),a._v(" "),t("li",[t("code",[a._v("COMMENT 'string'")]),a._v("，表示注释信息。")])]),a._v(" "),t("blockquote",[t("p",[a._v("修改存储过程使用ALTER PROCEDURE语句，修改存储函数使用ALTER FUNCTION语句。但是，这两个语句的结构是一样的，语句中的所有参数也是一样的。")])]),a._v(" "),t("p",[t("strong",[a._v("举例1：")])]),a._v(" "),t("p",[a._v("修改存储过程CountProc的定义。将读写权限改为MODIFIES SQL DATA，并指明调用者可以执行，代码如下：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("ALTER　PROCEDURE　CountProc\nMODIFIES SQL DATA\nSQL SECURITY INVOKER ;\n")])])]),t("p",[a._v("查询修改后的信息：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT specific_name,sql_data_access,security_type\nFROM information_schema.`ROUTINES`\nWHERE routine_name = 'CountProc' AND routine_type = 'PROCEDURE';\n")])])]),t("p",[a._v("结果显示，存储过程修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ ACCESS）已经变成MODIFIES SQL DATA，安全类型（SECURITY_TYPE）已经变成INVOKER。")]),a._v(" "),t("p",[t("strong",[a._v("举例2：")])]),a._v(" "),t("p",[a._v("修改存储函数CountProc的定义。将读写权限改为READS SQL DATA，并加上注释信息“FIND NAME”，代码如下：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("ALTER　FUNCTION　CountProc\nREADS SQL DATA\nCOMMENT 'FIND NAME' ;\n")])])]),t("p",[a._v("存储函数修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ACCESS）已经变成READS SQL DATA，函数注释（ROUTINE_COMMENT）已经变成FIND NAME。")]),a._v(" "),t("h3",{attrs:{id:"_5-3-删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-删除"}},[a._v("#")]),a._v(" 5.3 删除")]),a._v(" "),t("p",[a._v("删除存储过程和函数，可以使用DROP语句，其语法结构如下：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DROP {PROCEDURE | FUNCTION} [IF EXISTS] 存储过程或函数的名\n")])])]),t("p",[a._v("IF EXISTS：如果程序或函数不存储，它可以防止发生错误，产生一个用SHOW WARNINGS查看的警告。")]),a._v(" "),t("p",[a._v("举例：")]),a._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DROP PROCEDURE CountProc;\n")])])]),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("DROP FUNCTION CountProc;\n")])])]),t("h2",{attrs:{id:"_6-关于存储过程使用的争议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-关于存储过程使用的争议"}},[a._v("#")]),a._v(" 6. 关于存储过程使用的争议")]),a._v(" "),t("p",[a._v("尽管存储过程有诸多优点，但是对于存储过程的使用，"),t("strong",[a._v("一直都存在着很多争议")]),a._v("，比如有些公司对于大型项目要求使用存储过程，而有些公司在手册中明确禁止使用存储过程，为什么这些公司对存储过程的使用需求差别这么大呢？")]),a._v(" "),t("h3",{attrs:{id:"_6-1-优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-优点"}},[a._v("#")]),a._v(" 6.1 优点")]),a._v(" "),t("p",[a._v("**1、存储过程可以一次编译多次使用。**存储过程只在创建时进行编译，之后的使用都不需要重新编译，这就提升了 SQL 的执行效率。")]),a._v(" "),t("p",[a._v("**2、可以减少开发工作量。**将代码"),t("code",[a._v("封装")]),a._v("成模块，实际上是编程的核心思想之一，这样可以把复杂的问题拆解成不同的模块，然后模块之间可以"),t("code",[a._v("重复使用")]),a._v("，在减少开发工作量的同时，还能保证代码的结构清晰。")]),a._v(" "),t("p",[a._v("**3、存储过程的安全性强。**我们在设定存储过程的时候可以"),t("code",[a._v("设置对用户的使用权限")]),a._v("，这样就和视图一样具有较强的安全性。")]),a._v(" "),t("p",[a._v("**4、可以减少网络传输量。**因为代码封装到存储过程中，每次使用只需要调用存储过程即可，这样就减少了网络传输量。")]),a._v(" "),t("p",[a._v("**5、良好的封装性。**在进行相对复杂的数据库操作时，原本需要使用一条一条的 SQL 语句，可能要连接多次数据库才能完成的操作，现在变成了一次存储过程，只需要"),t("code",[a._v("连接一次即可")]),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"_6-2-缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-缺点"}},[a._v("#")]),a._v(" 6.2 缺点")]),a._v(" "),t("p",[a._v("基于上面这些优点，不少大公司都要求大型项目使用存储过程，比如微软、IBM 等公司。但是国内的阿里并不推荐开发人员使用存储过程，这是为什么呢？")]),a._v(" "),t("blockquote",[t("h4",{attrs:{id:"阿里开发规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阿里开发规范"}},[a._v("#")]),a._v(" 阿里开发规范")]),a._v(" "),t("p",[a._v("【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。")])]),a._v(" "),t("p",[a._v("存储过程虽然有诸如上面的好处，但缺点也是很明显的。")]),a._v(" "),t("p",[a._v("**1、可移植性差。**存储过程不能跨数据库移植，比如在 MySQL、Oracle 和 SQL Server 里编写的存储过程，在换成其他数据库时都需要重新编写。")]),a._v(" "),t("p",[a._v("**2、调试困难。**只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。虽然也有一些第三方工具可以对存储过程进行调试，但要收费。")]),a._v(" "),t("p",[a._v("**3、存储过程的版本管理很困难。**比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。")]),a._v(" "),t("p",[a._v("**4、它不适合高并发的场景。**高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护，"),t("code",[a._v("增加数据库的压力")]),a._v("，显然就不适用了。")]),a._v(" "),t("p",[a._v("小结：")]),a._v(" "),t("p",[a._v("存储过程既方便，又有局限性。尽管不同的公司对存储过程的态度不一，但是对于我们开发人员来说，不论怎样，掌握存储过程都是必备的技能之一。")])])}),[],!1,null,null,null);t.default=e.exports}}]);