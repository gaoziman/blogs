(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{370:function(a,e,t){"use strict";t.r(e);var s=t(7),n=Object(s.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("配套视频参考："),e("a",{attrs:{href:"https://www.bilibili.com/video/BV1iq4y1u7vj?p=1&vd_source=cea816a08805c218ac4390ae9b61ae31",target:"_blank",rel:"noopener noreferrer"}},[a._v("MySQL数据库天花板--康师傅"),e("OutboundLink")],1)]),a._v(" "),e("hr"),a._v(" "),e("h2",{attrs:{id:"_1-变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量"}},[a._v("#")]),a._v(" 1. 变量")]),a._v(" "),e("p",[a._v("在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终的结果数据。")]),a._v(" "),e("p",[a._v("在 MySQL 数据库中，变量分为"),e("code",[a._v("系统变量")]),a._v("以及"),e("code",[a._v("用户自定义变量")]),a._v("。")]),a._v(" "),e("h3",{attrs:{id:"_1-1-系统变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-系统变量"}},[a._v("#")]),a._v(" 1.1 系统变量")]),a._v(" "),e("h4",{attrs:{id:"_1-1-1-系统变量分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-系统变量分类"}},[a._v("#")]),a._v(" 1.1.1 系统变量分类")]),a._v(" "),e("p",[a._v("变量由系统定义，不是用户定义，属于"),e("code",[a._v("服务器")]),a._v("层面。启动MySQL服务，生成MySQL服务实例期间，MySQL将为MySQL服务器内存中的系统变量赋值，这些系统变量定义了当前MySQL服务实例的属性、特征。这些系统变量的值要么是"),e("code",[a._v("编译MySQL时参数")]),a._v("的默认值，要么是"),e("code",[a._v("配置文件")]),a._v("（例如my.ini等）中的参数值。大家可以通过网址 "),e("code",[a._v("https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html")]),a._v(" 查看MySQL文档的系统变量。")]),a._v(" "),e("p",[a._v("系统变量分为全局系统变量（需要添加"),e("code",[a._v("global")]),a._v(" 关键字）以及会话系统变量（需要添加 "),e("code",[a._v("session")]),a._v(" 关键字），有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。**如果不写，默认会话级别。**静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量。")]),a._v(" "),e("p",[a._v("每一个MySQL客户机成功连接MySQL服务器后，都会产生与之对应的会话。会话期间，MySQL服务实例会在MySQL服务器内存中生成与该会话对应的会话系统变量，这些会话系统变量的初始值是全局系统变量值的复制。如下图：")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20211108114846634.png",alt:"image-20211108114846634"}})]),a._v(" "),e("ul",[e("li",[a._v("全局系统变量针对于所有会话（连接）有效，但"),e("code",[a._v("不能跨重启")])]),a._v(" "),e("li",[a._v("会话系统变量仅针对于当前会话（连接）有效。会话期间，当前会话对某个会话系统变量值的修改，不会影响其他会话同一个会话系统变量的值。")]),a._v(" "),e("li",[a._v("会话1对某个全局系统变量值的修改会导致会话2中同一个全局系统变量值的修改。")])]),a._v(" "),e("p",[a._v("在MySQL中有些系统变量只能是全局的，例如 max_connections 用于限制服务器的最大连接数；有些系统变量作用域既可以是全局又可以是会话，例如 character_set_client 用于设置客户端的字符集；有些系统变量的作用域只能是当前会话，例如 pseudo_thread_id 用于标记当前会话的 MySQL 连接 ID。")]),a._v(" "),e("h4",{attrs:{id:"_1-1-2-查看系统变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-查看系统变量"}},[a._v("#")]),a._v(" 1.1.2 查看系统变量")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("查看所有或部分系统变量")])])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#查看所有全局变量\nSHOW GLOBAL VARIABLES;\n\n#查看所有会话变量\nSHOW SESSION VARIABLES;\n或\nSHOW VARIABLES;\n")])])]),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#查看满足条件的部分系统变量。\nSHOW GLOBAL VARIABLES LIKE '%标识符%';\n\n#查看满足条件的部分会话变量\nSHOW SESSION VARIABLES LIKE '%标识符%';\n")])])]),e("p",[a._v("举例：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SHOW GLOBAL VARIABLES LIKE 'admin_%';\n")])])]),e("ul",[e("li",[e("strong",[a._v("查看指定系统变量")])])]),a._v(" "),e("p",[a._v("作为 MySQL 编码规范，MySQL 中的系统变量以"),e("code",[a._v("两个“@”")]),a._v("开头，其中“@@global”仅用于标记全局系统变量，“@@session”仅用于标记会话系统变量。“@@”首先标记会话系统变量，如果会话系统变量不存在，则标记全局系统变量。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#查看指定的系统变量的值\nSELECT @@global.变量名;\n\n#查看指定的会话变量的值\nSELECT @@session.变量名;\n#或者\nSELECT @@变量名;\n")])])]),e("ul",[e("li",[e("strong",[a._v("修改系统变量的值")])])]),a._v(" "),e("p",[a._v("有些时候，数据库管理员需要修改系统变量的默认值，以便修改当前会话或者MySQL服务实例的属性、特征。具体方法：")]),a._v(" "),e("p",[a._v("方式1：修改MySQL"),e("code",[a._v("配置文件")]),a._v("，继而修改MySQL系统变量的值（该方法需要重启MySQL服务）")]),a._v(" "),e("p",[a._v("方式2：在MySQL服务运行期间，使用“set”命令重新设置系统变量的值")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#为某个系统变量赋值\n#方式1：\nSET @@global.变量名=变量值;\n#方式2：\nSET GLOBAL 变量名=变量值;\n\n\n#为某个会话变量赋值\n#方式1：\nSET @@session.变量名=变量值;\n#方式2：\nSET SESSION 变量名=变量值;\n")])])]),e("p",[a._v("举例：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT @@global.autocommit;\nSET GLOBAL autocommit=0;\n")])])]),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT @@session.tx_isolation;\nSET @@session.tx_isolation='read-uncommitted';\n")])])]),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SET GLOBAL max_connections = 1000;\nSELECT @@global.max_connections;\n")])])]),e("h3",{attrs:{id:"_1-2-用户变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-用户变量"}},[a._v("#")]),a._v(" 1.2 用户变量")]),a._v(" "),e("h4",{attrs:{id:"_1-2-1-用户变量分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-用户变量分类"}},[a._v("#")]),a._v(" 1.2.1 用户变量分类")]),a._v(" "),e("p",[a._v("用户变量是用户自己定义的，作为 MySQL 编码规范，MySQL 中的用户变量以"),e("code",[a._v("一个“@”")]),a._v("开头。根据作用范围不同，又分为"),e("code",[a._v("会话用户变量")]),a._v("和"),e("code",[a._v("局部变量")]),a._v("。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("会话用户变量：作用域和会话变量一样，只对"),e("code",[a._v("当前连接")]),a._v("会话有效。")])]),a._v(" "),e("li",[e("p",[a._v("局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在"),e("code",[a._v("存储过程和函数")]),a._v("中使用。")])])]),a._v(" "),e("h4",{attrs:{id:"_1-2-2-会话用户变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-会话用户变量"}},[a._v("#")]),a._v(" 1.2.2 会话用户变量")]),a._v(" "),e("ul",[e("li",[a._v("变量的定义")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#方式1：“=”或“:=”\nSET @用户变量 = 值;\nSET @用户变量 := 值;\n\n#方式2：“:=” 或 INTO关键字\nSELECT @用户变量 := 表达式 [FROM 等子句];\nSELECT 表达式 INTO @用户变量  [FROM 等子句];\n\n")])])]),e("ul",[e("li",[a._v("查看用户变量的值 （查看、比较、运算等）")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT @用户变量\n")])])]),e("ul",[e("li",[a._v("举例")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SET @a = 1;\n\nSELECT @a;\n")])])]),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT @num := COUNT(*) FROM employees;\n\nSELECT @num;\n")])])]),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT AVG(salary) INTO @avgsalary FROM employees;\n\nSELECT @avgsalary;\n")])])]),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT @big;  #查看某个未声明的变量时，将得到NULL值\n")])])]),e("h4",{attrs:{id:"_1-2-3-局部变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-局部变量"}},[a._v("#")]),a._v(" 1.2.3 局部变量")]),a._v(" "),e("p",[a._v("定义：可以使用"),e("code",[a._v("DECLARE")]),a._v("语句定义一个局部变量")]),a._v(" "),e("p",[a._v("作用域：仅仅在定义它的 BEGIN ... END 中有效")]),a._v(" "),e("p",[a._v("位置：只能放在 BEGIN ... END 中，而且只能放在第一句")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("BEGIN\n\t#声明局部变量\n\tDECLARE 变量名1 变量数据类型 [DEFAULT 变量默认值];\n\tDECLARE 变量名2,变量名3,... 变量数据类型 [DEFAULT 变量默认值];\n\n\t#为局部变量赋值\n\tSET 变量名1 = 值;\n\tSELECT 值 INTO 变量名2 [FROM 子句];\n\n\t#查看局部变量的值\n\tSELECT 变量1,变量2,变量3;\nEND\n\n")])])]),e("p",[e("strong",[a._v("1.定义变量")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DECLARE 变量名 类型 [default 值];  # 如果没有DEFAULT子句，初始值为NULL\n")])])]),e("p",[a._v("举例：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DECLARE　myparam　INT　DEFAULT 100;\n")])])]),e("p",[e("strong",[a._v("2.变量赋值")])]),a._v(" "),e("p",[a._v("方式1：一般用于赋简单的值")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SET 变量名=值;\nSET 变量名:=值;\n")])])]),e("p",[a._v("方式2：一般用于赋表中的字段值")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT 字段名或表达式 INTO 变量名 FROM 表;\n")])])]),e("p",[e("strong",[a._v("3.使用变量")]),a._v("（查看、比较、运算等）")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT 局部变量名;\n")])])]),e("p",[a._v("举例1：声明局部变量，并分别赋值为employees表中employee_id为102的last_name和salary")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE set_value()\nBEGIN\n\tDECLARE emp_name VARCHAR(25);\n\tDECLARE sal DOUBLE(10,2);\n\t\n\tSELECT last_name,salary INTO emp_name,sal\n\tFROM employees \n\tWHERE employee_id = 102;\n\t\n\tSELECT emp_name,sal;\nEND //\n\nDELIMITER ;\n")])])]),e("p",[a._v("举例2：声明两个变量，求和并打印 （分别使用会话用户变量、局部变量的方式实现）")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#方式1：使用用户变量\nSET @m=1;\nSET @n=1;\nSET @sum=@m+@n;\n\nSELECT @sum;\n")])])]),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#方式2：使用局部变量\nDELIMITER //\n\nCREATE PROCEDURE add_value()\nBEGIN\n\t#局部变量\n\tDECLARE m INT DEFAULT 1;\n\tDECLARE n INT DEFAULT 3;\n\tDECLARE SUM INT;\n\t\n\tSET SUM = m+n;\n\tSELECT SUM;\nEND //\n\nDELIMITER ;\n")])])]),e("p",[a._v("举例3：创建存储过程“different_salary”查询某员工和他领导的薪资差距，并用IN参数emp_id接收员工id，用OUT参数dif_salary输出薪资差距结果。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#声明\nDELIMITER //\n\nCREATE PROCEDURE different_salary(IN emp_id INT,OUT dif_salary DOUBLE)\nBEGIN\n\t#声明局部变量\n\tDECLARE emp_sal,mgr_sal DOUBLE DEFAULT 0.0;\n\tDECLARE mgr_id INT;\n\t\n\tSELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;\n\tSELECT manager_id INTO mgr_id FROM employees WHERE employee_id = emp_id;\n\tSELECT salary INTO mgr_sal FROM employees WHERE employee_id = mgr_id;\n\tSET dif_salary = mgr_sal - emp_sal;\n\nEND //\n\nDELIMITER ;\n\n#调用\nSET @emp_id = 102;\nCALL different_salary(@emp_id,@diff_sal);\n\n\n#查看\nSELECT @diff_sal;\n")])])]),e("h4",{attrs:{id:"_1-2-4-对比会话用户变量与局部变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-对比会话用户变量与局部变量"}},[a._v("#")]),a._v(" 1.2.4 对比会话用户变量与局部变量")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("\t\t\t  作用域\t\t\t\t\t定义位置\t\t\t\t  语法\n会话用户变量\t  当前会话\t\t\t\t   会话的任何地方\t\t\t\t加@符号，不用指定类型\n局部变量\t   定义它的BEGIN END中 \t\tBEGIN END的第一句话\t\t  一般不用加@,需要指定类型\n")])])]),e("h2",{attrs:{id:"_2-定义条件与处理程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-定义条件与处理程序"}},[a._v("#")]),a._v(" 2. 定义条件与处理程序")]),a._v(" "),e("p",[e("code",[a._v("定义条件")]),a._v("是事先定义程序执行过程中可能遇到的问题，"),e("code",[a._v("处理程序")]),a._v("定义了在遇到问题时应当采取的处理方式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能力，避免程序异常停止运行。")]),a._v(" "),e("p",[a._v("说明：定义条件和处理程序在存储过程、存储函数中都是支持的。")]),a._v(" "),e("h3",{attrs:{id:"_2-1-案例分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-案例分析"}},[a._v("#")]),a._v(" 2.1 案例分析")]),a._v(" "),e("p",[a._v("**案例分析：**创建一个名称为“UpdateDataNoCondition”的存储过程。代码如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE UpdateDataNoCondition()\n\tBEGIN\n\t\tSET @x = 1;\n\t\tUPDATE employees SET email = NULL WHERE last_name = 'Abel';\n\t\tSET @x = 2;\n\t\tUPDATE employees SET email = 'aabbel' WHERE last_name = 'Abel';\n\t\tSET @x = 3;\n\tEND //\n\nDELIMITER ;\n")])])]),e("p",[a._v("调用存储过程：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> CALL UpdateDataNoCondition();\nERROR 1048 (23000): Column 'email' cannot be null\n\nmysql> SELECT @x;\n+------+\n| @x   |\n+------+\n|   1  |\n+------+\n1 row in set (0.00 sec)\n\n")])])]),e("p",[a._v("可以看到，此时@x变量的值为1。结合创建存储过程的SQL语句代码可以得出：在存储过程中未定义条件和处理程序，且当存储过程中执行的SQL语句报错时，MySQL数据库会抛出错误，并退出当前SQL逻辑，不再向下继续执行。")]),a._v(" "),e("h3",{attrs:{id:"_2-2-定义条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-定义条件"}},[a._v("#")]),a._v(" 2.2 定义条件")]),a._v(" "),e("p",[a._v("定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个"),e("code",[a._v("错误名字")]),a._v("和"),e("code",[a._v("指定的错误条件")]),a._v("关联起来。这个名字可以随后被用在定义处理程序的"),e("code",[a._v("DECLARE HANDLER")]),a._v("语句中。")]),a._v(" "),e("p",[a._v("定义条件使用DECLARE语句，语法格式如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DECLARE 错误名称 CONDITION FOR 错误码（或错误条件）\n")])])]),e("p",[a._v("错误码的说明：")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("MySQL_error_code")]),a._v("和"),e("code",[a._v("sqlstate_value")]),a._v("都可以表示MySQL的错误。\n"),e("ul",[e("li",[a._v("MySQL_error_code是数值类型错误代码。")]),a._v(" "),e("li",[a._v("sqlstate_value是长度为5的字符串类型错误代码。")])])]),a._v(" "),e("li",[a._v("例如，在ERROR 1418 (HY000)中，1418是MySQL_error_code，'HY000'是sqlstate_value。")]),a._v(" "),e("li",[a._v("例如，在ERROR 1142（42000）中，1142是MySQL_error_code，'42000'是sqlstate_value。")])]),a._v(" "),e("p",[a._v("**举例1：**定义“Field_Not_Be_NULL”错误名与MySQL中违反非空约束的错误类型是“ERROR 1048 (23000)”对应。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#使用MySQL_error_code\nDECLARE Field_Not_Be_NULL CONDITION FOR 1048;\n\n#使用sqlstate_value\nDECLARE Field_Not_Be_NULL CONDITION FOR SQLSTATE '23000';\n")])])]),e("p",[a._v('**举例2：**定义"ERROR 1148(42000)"错误，名称为command_not_allowed。')]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#使用MySQL_error_code\nDECLARE command_not_allowed CONDITION FOR 1148;\n\n#使用sqlstate_value\nDECLARE command_not_allowed CONDITION FOR SQLSTATE '42000';\n")])])]),e("h3",{attrs:{id:"_2-3-定义处理程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-定义处理程序"}},[a._v("#")]),a._v(" 2.3 定义处理程序")]),a._v(" "),e("p",[a._v("可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。定义处理程序时，使用DECLARE语句的语法如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DECLARE 处理方式 HANDLER FOR 错误类型 处理语句\n")])])]),e("ul",[e("li",[e("strong",[a._v("处理方式")]),a._v("：处理方式有3个取值：CONTINUE、EXIT、UNDO。\n"),e("ul",[e("li",[e("code",[a._v("CONTINUE")]),a._v("：表示遇到错误不处理，继续执行。")]),a._v(" "),e("li",[e("code",[a._v("EXIT")]),a._v("：表示遇到错误马上退出。")]),a._v(" "),e("li",[e("code",[a._v("UNDO")]),a._v("：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。")])])]),a._v(" "),e("li",[e("strong",[a._v("错误类型")]),a._v("（即条件）可以有如下取值：\n"),e("ul",[e("li",[e("code",[a._v("SQLSTATE '字符串错误码'")]),a._v("：表示长度为5的sqlstate_value类型的错误代码；")]),a._v(" "),e("li",[e("code",[a._v("MySQL_error_code")]),a._v("：匹配数值类型错误代码；")]),a._v(" "),e("li",[e("code",[a._v("错误名称")]),a._v("：表示DECLARE ... CONDITION定义的错误条件名称。")]),a._v(" "),e("li",[e("code",[a._v("SQLWARNING")]),a._v("：匹配所有以01开头的SQLSTATE错误代码；")]),a._v(" "),e("li",[e("code",[a._v("NOT FOUND")]),a._v("：匹配所有以02开头的SQLSTATE错误代码；")]),a._v(" "),e("li",[e("code",[a._v("SQLEXCEPTION")]),a._v("：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；")])])]),a._v(" "),e("li",[e("strong",[a._v("处理语句")]),a._v("：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是像“"),e("code",[a._v("SET 变量 = 值")]),a._v("”这样的简单语句，也可以是使用"),e("code",[a._v("BEGIN ... END")]),a._v("编写的复合语句。")])]),a._v(" "),e("p",[a._v("定义处理程序的几种方式，代码如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#方法1：捕获sqlstate_value\nDECLARE CONTINUE HANDLER FOR SQLSTATE '42S02' SET @info = 'NO_SUCH_TABLE';\n\n#方法2：捕获mysql_error_value\nDECLARE CONTINUE HANDLER FOR 1146 SET @info = 'NO_SUCH_TABLE';\n\n#方法3：先定义条件，再调用\nDECLARE no_such_table CONDITION FOR 1146;\nDECLARE CONTINUE HANDLER FOR NO_SUCH_TABLE SET @info = 'NO_SUCH_TABLE';\n\n#方法4：使用SQLWARNING\nDECLARE EXIT HANDLER FOR SQLWARNING SET @info = 'ERROR';\n\n#方法5：使用NOT FOUND\nDECLARE EXIT HANDLER FOR NOT FOUND SET @info = 'NO_SUCH_TABLE';\n\n#方法6：使用SQLEXCEPTION\nDECLARE EXIT HANDLER FOR SQLEXCEPTION SET @info = 'ERROR';\n")])])]),e("h3",{attrs:{id:"_2-4-案例解决"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-案例解决"}},[a._v("#")]),a._v(" 2.4 案例解决")]),a._v(" "),e("p",[a._v("在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到MySQL_error_code值为1048时，执行CONTINUE操作，并且将@proc_value的值设置为-1。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE UpdateDataNoCondition()\n\tBEGIN\n\t\t#定义处理程序\n\t\tDECLARE CONTINUE HANDLER FOR 1048 SET @proc_value = -1;\n\t\t\n\t\tSET @x = 1;\n\t\tUPDATE employees SET email = NULL WHERE last_name = 'Abel';\n\t\tSET @x = 2;\n\t\tUPDATE employees SET email = 'aabbel' WHERE last_name = 'Abel';\n\t\tSET @x = 3;\n\tEND //\n\nDELIMITER ;\n")])])]),e("p",[a._v("调用过程：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> CALL UpdateDataWithCondition();\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SELECT @x,@proc_value;\n+------+-------------+\n| @x   | @proc_value |\n+------+-------------+\n|    3 |       \t -1  |\n+------+-------------+\n1 row in set (0.00 sec)\n\n")])])]),e("p",[e("strong",[a._v("举例：")])]),a._v(" "),e("p",[a._v("创建一个名称为“InsertDataWithCondition”的存储过程，代码如下。")]),a._v(" "),e("p",[a._v("在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到sqlstate_value值为23000时，执行EXIT操作，并且将@proc_value的值设置为-1。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#准备工作\nCREATE TABLE departments\nAS\nSELECT * FROM atguigudb.`departments`;\n\nALTER TABLE departments\nADD CONSTRAINT uk_dept_name UNIQUE(department_id);\n")])])]),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE InsertDataWithCondition()\n\tBEGIN\n\t\tDECLARE duplicate_entry CONDITION FOR SQLSTATE '23000' ;\n\t\tDECLARE EXIT HANDLER FOR duplicate_entry SET @proc_value = -1;\n\t\t\n\t\tSET @x = 1;\n\t\tINSERT INTO departments(department_name) VALUES('测试');\n\t\tSET @x = 2;\n\t\tINSERT INTO departments(department_name) VALUES('测试');\n\t\tSET @x = 3;\n\tEND //\n\nDELIMITER ;\n")])])]),e("p",[a._v("调用存储过程：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> CALL InsertDataWithCondition();\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SELECT @x,@proc_value;\n+------+-------------+\n| @x   | @proc_value |\n+------+-------------+\n|    2 |       \t -1  |\n+------+-------------+\n1 row in set (0.00 sec)\n\n")])])]),e("h2",{attrs:{id:"_3-流程控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-流程控制"}},[a._v("#")]),a._v(" 3. 流程控制")]),a._v(" "),e("p",[a._v("解决复杂问题不可能通过一个 SQL 语句完成，我们需要执行多个 SQL 操作。流程控制语句的作用就是控制存储过程中 SQL 语句的执行顺序，是我们完成复杂操作必不可少的一部分。只要是执行的程序，流程就分为三大类：")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("顺序结构")]),a._v("：程序从上往下依次执行")]),a._v(" "),e("li",[e("code",[a._v("分支结构")]),a._v("：程序按条件进行选择执行，从两条或多条路径中选择一条执行")]),a._v(" "),e("li",[e("code",[a._v("循环结构")]),a._v("：程序满足一定条件下，重复执行一组语句")])]),a._v(" "),e("p",[a._v("针对于MySQL 的流程控制语句主要有 3 类。注意：只能用于存储程序。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("条件判断语句")]),a._v("：IF 语句和 CASE 语句")]),a._v(" "),e("li",[e("code",[a._v("循环语句")]),a._v("：LOOP、WHILE 和 REPEAT 语句")]),a._v(" "),e("li",[e("code",[a._v("跳转语句")]),a._v("：ITERATE 和 LEAVE 语句")])]),a._v(" "),e("h3",{attrs:{id:"_3-1-分支结构之-if"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-分支结构之-if"}},[a._v("#")]),a._v(" 3.1 分支结构之 IF")]),a._v(" "),e("ul",[e("li",[a._v("IF 语句的语法结构是：")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("IF 表达式1 THEN 操作1\n[ELSEIF 表达式2 THEN 操作2]……\n[ELSE 操作N]\nEND IF\n")])])]),e("p",[a._v("根据表达式的结果为TRUE或FALSE执行相应的语句。这里“[]”中的内容是可选的。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("特点：① 不同的表达式对应不同的操作 ② 使用在begin end中")])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("举例1：")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("IF val IS NULL \n\tTHEN SELECT 'val is null';\nELSE SELECT 'val is not null';\n\nEND IF;\n")])])])]),a._v(" "),e("li",[e("p",[a._v("**举例2：**声明存储过程“update_salary_by_eid1”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于8000元并且入职时间超过5年，就涨薪500元；否则就不变。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE update_salary_by_eid1(IN emp_id INT)\nBEGIN\n\tDECLARE emp_salary DOUBLE;\n\tDECLARE hire_year DOUBLE;\n\n\tSELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;\n\n\tSELECT DATEDIFF(CURDATE(),hire_date)/365 INTO hire_year\n\tFROM employees WHERE employee_id = emp_id;\n\n\tIF emp_salary < 8000 AND hire_year > 5\n\tTHEN UPDATE employees SET salary = salary + 500 WHERE employee_id = emp_id;\n\tEND IF;\nEND //\n\n\nDELIMITER ;\n")])])])]),a._v(" "),e("li",[e("p",[a._v("**举例3：**声明存储过程“update_salary_by_eid2”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元并且入职时间超过5年，就涨薪500元；否则就涨薪100元。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE update_salary_by_eid2(IN emp_id INT)\nBEGIN\n\tDECLARE emp_salary DOUBLE;\n\tDECLARE hire_year DOUBLE;\n\n\tSELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;\n\n\tSELECT DATEDIFF(CURDATE(),hire_date)/365 INTO hire_year\n\tFROM employees WHERE employee_id = emp_id;\n\n\tIF emp_salary < 8000 AND hire_year > 5\n\t\tTHEN UPDATE employees SET salary = salary + 500 WHERE employee_id = emp_id;\n\tELSE \n\t\tUPDATE employees SET salary = salary + 100 WHERE employee_id = emp_id;\n\tEND IF;\nEND //\n\n\nDELIMITER ;\n")])])])]),a._v(" "),e("li",[e("p",[a._v("**举例4：**声明存储过程“update_salary_by_eid3”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元，就更新薪资为9000元；薪资如果大于等于9000元且低于10000的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE update_salary_by_eid3(IN emp_id INT)\nBEGIN\n\tDECLARE emp_salary DOUBLE;\n\tDECLARE bonus DECIMAL(3,2);\n\n\tSELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;\n\tSELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;\n\n\tIF emp_salary < 9000\n\t\tTHEN UPDATE employees SET salary = 9000 WHERE employee_id = emp_id;\n\tELSEIF emp_salary < 10000 AND bonus IS NULL\n\t\tTHEN UPDATE employees SET commission_pct = 0.01 WHERE employee_id = emp_id;\n\tELSE\n\t\tUPDATE employees SET salary = salary + 100 WHERE employee_id = emp_id;\n\tEND IF;\nEND //\n\nDELIMITER ;\n")])])])])]),a._v(" "),e("h3",{attrs:{id:"_3-2-分支结构之-case"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-分支结构之-case"}},[a._v("#")]),a._v(" 3.2 分支结构之 CASE")]),a._v(" "),e("p",[a._v("CASE 语句的语法结构1：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#情况一：类似于switch\nCASE 表达式\nWHEN 值1 THEN 结果1或语句1(如果是语句，需要加分号) \nWHEN 值2 THEN 结果2或语句2(如果是语句，需要加分号)\n...\nELSE 结果n或语句n(如果是语句，需要加分号)\nEND [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）\n")])])]),e("p",[a._v("CASE 语句的语法结构2：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#情况二：类似于多重if\nCASE \nWHEN 条件1 THEN 结果1或语句1(如果是语句，需要加分号) \nWHEN 条件2 THEN 结果2或语句2(如果是语句，需要加分号)\n...\nELSE 结果n或语句n(如果是语句，需要加分号)\nEND [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）\n")])])]),e("ul",[e("li",[e("strong",[a._v("举例1：")])])]),a._v(" "),e("p",[a._v("使用CASE流程控制语句的第1种格式，判断val值等于1、等于2，或者两者都不等。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("CASE val\n　　　WHEN 1 THEN SELECT 'val is 1';\n　　　WHEN 2 THEN SELECT 'val is 2';\n　　　ELSE SELECT 'val is not 1 or 2';\nEND CASE;\n")])])]),e("ul",[e("li",[e("strong",[a._v("举例2：")])])]),a._v(" "),e("p",[a._v("使用CASE流程控制语句的第2种格式，判断val是否为空、小于0、大于0或者等于0。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("CASE\n\tWHEN val IS NULL THEN SELECT 'val is null';\n\tWHEN val < 0 THEN SELECT 'val is less than 0';\n\tWHEN val > 0 THEN SELECT 'val is greater than 0';\n\tELSE SELECT 'val is 0';\nEND CASE;\n")])])]),e("ul",[e("li",[a._v("**举例3：**声明存储过程“update_salary_by_eid4”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元，就更新薪资为9000元；薪资大于等于9000元且低于10000的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE update_salary_by_eid4(IN emp_id INT)\nBEGIN\n\tDECLARE emp_sal DOUBLE;\n\tDECLARE bonus DECIMAL(3,2);\n\n\tSELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;\n\tSELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;\n\n\tCASE\n\tWHEN emp_sal<9000\n\t\tTHEN UPDATE employees SET salary=9000 WHERE employee_id = emp_id;\n\tWHEN emp_sal<10000 AND bonus IS NULL\n\t\tTHEN UPDATE employees SET commission_pct=0.01 WHERE employee_id = emp_id;\n\tELSE\n\t\tUPDATE employees SET salary=salary+100 WHERE employee_id = emp_id;\n\tEND CASE;\nEND //\n\nDELIMITER ;\n")])])]),e("ul",[e("li",[a._v("举例4：声明存储过程update_salary_by_eid5，定义IN参数emp_id，输入员工编号。判断该员工的入职年限，如果是0年，薪资涨50；如果是1年，薪资涨100；如果是2年，薪资涨200；如果是3年，薪资涨300；如果是4年，薪资涨400；其他的涨薪500。")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE update_salary_by_eid5(IN emp_id INT)\nBEGIN\n\tDECLARE emp_sal DOUBLE;\n\tDECLARE hire_year DOUBLE;\n\n\tSELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;\n\t\n\tSELECT ROUND(DATEDIFF(CURDATE(),hire_date)/365) INTO hire_year FROM employees WHERE employee_id = emp_id;\n\n\tCASE hire_year\n\t\tWHEN 0 THEN UPDATE employees SET salary=salary+50 WHERE employee_id = emp_id;\n\t\tWHEN 1 THEN UPDATE employees SET salary=salary+100 WHERE employee_id = emp_id;\n\t\tWHEN 2 THEN UPDATE employees SET salary=salary+200 WHERE employee_id = emp_id;\n\t\tWHEN 3 THEN UPDATE employees SET salary=salary+300 WHERE employee_id = emp_id;\n\t\tWHEN 4 THEN UPDATE employees SET salary=salary+400 WHERE employee_id = emp_id;\n\t\tELSE UPDATE employees SET salary=salary+500 WHERE employee_id = emp_id;\n\tEND CASE;\nEND //\n\nDELIMITER ;\n")])])]),e("h3",{attrs:{id:"_3-3-循环结构之loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-循环结构之loop"}},[a._v("#")]),a._v(" 3.3 循环结构之LOOP")]),a._v(" "),e("p",[a._v("LOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE子句），跳出循环过程。")]),a._v(" "),e("p",[a._v("LOOP语句的基本格式如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[loop_label:] LOOP\n\t循环执行的语句\nEND LOOP [loop_label]\n")])])]),e("p",[a._v("其中，loop_label表示LOOP语句的标注名称，该参数可以省略。")]),a._v(" "),e("p",[e("strong",[a._v("举例1：")])]),a._v(" "),e("p",[a._v("使用LOOP语句进行循环操作，id值小于10时将重复执行循环过程。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DECLARE id INT DEFAULT 0;\nadd_loop:LOOP\n\tSET id = id +1;\n\tIF id >= 10 THEN LEAVE add_loop;\n\tEND IF;\n\nEND LOOP add_loop;\n")])])]),e("p",[a._v("**举例2：**当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_loop()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.1倍。直到全公司的平均薪资达到12000结束。并统计循环次数。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE update_salary_loop(OUT num INT)\nBEGIN\n\tDECLARE avg_salary DOUBLE;\n\tDECLARE loop_count INT DEFAULT 0;\n\t\n\tSELECT AVG(salary) INTO avg_salary FROM employees;\n\t\n\tlabel_loop:LOOP\n\t\tIF avg_salary >= 12000 THEN LEAVE label_loop;\n\t\tEND IF;\n\t\t\n\t\tUPDATE employees SET salary = salary * 1.1;\n\t\tSET loop_count = loop_count + 1;\n\t\tSELECT AVG(salary) INTO avg_salary FROM employees;\n\tEND LOOP label_loop;\n\t\n\tSET num = loop_count;\n\nEND //\n\nDELIMITER ;\n")])])]),e("h3",{attrs:{id:"_3-4-循环结构之while"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-循环结构之while"}},[a._v("#")]),a._v(" 3.4 循环结构之WHILE")]),a._v(" "),e("p",[a._v("WHILE语句创建一个带条件判断的循环过程。WHILE在执行语句执行时，先对指定的表达式进行判断，如果为真，就执行循环内的语句，否则退出循环。WHILE语句的基本格式如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[while_label:] WHILE 循环条件  DO\n\t循环体\nEND WHILE [while_label];\n")])])]),e("p",[a._v("while_label为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直至循环条件为假，退出循环。")]),a._v(" "),e("p",[e("strong",[a._v("举例1：")])]),a._v(" "),e("p",[a._v("WHILE语句示例，i值小于10时，将重复执行循环过程，代码如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE test_while()\nBEGIN\t\n\tDECLARE i INT DEFAULT 0;\n\t\n\tWHILE i < 10 DO\n\t\tSET i = i + 1;\n\tEND WHILE;\n\t\n\tSELECT i;\nEND //\n\nDELIMITER ;\n#调用\nCALL test_while();\n")])])]),e("p",[a._v("**举例2：**市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“update_salary_while()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家降薪，薪资降为原来的90%。直到全公司的平均薪资达到5000结束。并统计循环次数。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE update_salary_while(OUT num INT)\nBEGIN\n\tDECLARE avg_sal DOUBLE ;\n\tDECLARE while_count INT DEFAULT 0;\n\t\n\tSELECT AVG(salary) INTO avg_sal FROM employees;\n\t\n\tWHILE avg_sal > 5000 DO\n\t\tUPDATE employees SET salary = salary * 0.9;\n\t\t\n\t\tSET while_count = while_count + 1;\n\t\t\n\t\tSELECT AVG(salary) INTO avg_sal FROM employees;\n\tEND WHILE;\n\t\n\tSET num = while_count;\n\nEND //\n\nDELIMITER ;\n")])])]),e("h3",{attrs:{id:"_3-5-循环结构之repeat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-循环结构之repeat"}},[a._v("#")]),a._v(" 3.5 循环结构之REPEAT")]),a._v(" "),e("p",[a._v("REPEAT语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循环，然后在 UNTIL 中进行表达式的判断，如果满足条件就退出，即 END REPEAT；如果条件不满足，则会就继续执行循环，直到满足退出条件为止。")]),a._v(" "),e("p",[a._v("REPEAT语句的基本格式如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[repeat_label:] REPEAT\n　　　　循环体的语句\nUNTIL 结束循环的条件表达式\nEND REPEAT [repeat_label]\n")])])]),e("p",[a._v("repeat_label为REPEAT语句的标注名称，该参数可以省略；REPEAT语句内的语句或语句群被重复，直至expr_condition为真。")]),a._v(" "),e("p",[e("strong",[a._v("举例1：")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE test_repeat()\nBEGIN\t\n\tDECLARE i INT DEFAULT 0;\n\t\n\tREPEAT \n\t\tSET i = i + 1;\n\tUNTIL i >= 10\n\tEND REPEAT;\n\t\n\tSELECT i;\nEND //\n\nDELIMITER ;\n")])])]),e("p",[a._v("**举例2：**当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_repeat()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.15倍。直到全公司的平均薪资达到13000结束。并统计循环次数。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE update_salary_repeat(OUT num INT)\nBEGIN\n\tDECLARE avg_sal DOUBLE ;\n\tDECLARE repeat_count INT DEFAULT 0;\n\t\n\tSELECT AVG(salary) INTO avg_sal FROM employees;\n\t\n\tREPEAT\n\t\tUPDATE employees SET salary = salary * 1.15;\n\t\t\n\t\tSET repeat_count = repeat_count + 1;\n\t\t\n\t\tSELECT AVG(salary) INTO avg_sal FROM employees;\n\tUNTIL avg_sal >= 13000\n\tEND REPEAT;\n\t\n\tSET num = repeat_count;\n\t\t\nEND //\n\nDELIMITER ;\n")])])]),e("p",[e("strong",[a._v("对比三种循环结构：")])]),a._v(" "),e("p",[a._v('1、这三种循环都可以省略名称，但如果循环中添加了循环控制语句（LEAVE或ITERATE）则必须添加名称。\n2、\nLOOP：一般用于实现简单的"死"循环\nWHILE：先判断后执行\nREPEAT：先执行后判断，无条件至少执行一次')]),a._v(" "),e("h3",{attrs:{id:"_3-6-跳转语句之leave语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-跳转语句之leave语句"}},[a._v("#")]),a._v(" 3.6 跳转语句之LEAVE语句")]),a._v(" "),e("p",[a._v("LEAVE语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 break。")]),a._v(" "),e("p",[a._v("基本格式如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("LEAVE 标记名\n")])])]),e("p",[a._v("其中，label参数表示循环的标志。LEAVE和BEGIN ... END或循环一起被使用。")]),a._v(" "),e("p",[a._v("**举例1：**创建存储过程 “leave_begin()”，声明INT类型的IN参数num。给BEGIN...END加标记名，并在BEGIN...END中使用IF语句判断num参数的值。")]),a._v(" "),e("ul",[e("li",[a._v("如果num<=0，则使用LEAVE语句退出BEGIN...END；")]),a._v(" "),e("li",[a._v("如果num=1，则查询“employees”表的平均薪资；")]),a._v(" "),e("li",[a._v("如果num=2，则查询“employees”表的最低薪资；")]),a._v(" "),e("li",[a._v("如果num>2，则查询“employees”表的最高薪资。")])]),a._v(" "),e("p",[a._v("IF语句结束后查询“employees”表的总人数。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE leave_begin(IN num INT)\n\n\tbegin_label: BEGIN\n\t\tIF num<=0 \n\t\t\tTHEN LEAVE begin_label;\n\t\tELSEIF num=1 \n\t\t\tTHEN SELECT AVG(salary) FROM employees;\n\t\tELSEIF num=2 \n\t\t\tTHEN SELECT MIN(salary) FROM employees;\n\t\tELSE \n\t\t\tSELECT MAX(salary) FROM employees;\n\t\tEND IF;\n\t\t\n\t\tSELECT COUNT(*) FROM employees;\n\tEND //\n\n\nDELIMITER ;\n")])])]),e("p",[e("strong",[a._v("举例2：")])]),a._v(" "),e("p",[a._v("当市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“leave_while()”，声明OUT参数num，输出循环次数，存储过程中使用WHILE循环给大家降低薪资为原来薪资的90%，直到全公司的平均薪资小于等于10000，并统计循环次数。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\nCREATE PROCEDURE leave_while(OUT num INT)\n\nBEGIN \n\t#\n\tDECLARE avg_sal DOUBLE;#记录平均工资\n\tDECLARE while_count INT DEFAULT 0; #记录循环次数\n\t\n\tSELECT AVG(salary) INTO avg_sal FROM employees; #① 初始化条件\n\t\n\twhile_label:WHILE TRUE DO  #② 循环条件\n\t\t\n\t\t#③ 循环体\n\t\tIF avg_sal <= 10000 THEN\n\t\t\tLEAVE while_label;\n\t\tEND IF;\n\t\t\n\t\tUPDATE employees SET salary  = salary * 0.9;\n\t\tSET while_count = while_count + 1;\n\t\t\n\t\t#④ 迭代条件\n\t\tSELECT AVG(salary) INTO avg_sal FROM employees;\n\t\n\tEND WHILE;\n\t\n\t#赋值\n\tSET num = while_count;\n\nEND //\n\nDELIMITER ;\n")])])]),e("h3",{attrs:{id:"_3-7-跳转语句之iterate语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-跳转语句之iterate语句"}},[a._v("#")]),a._v(" 3.7 跳转语句之ITERATE语句")]),a._v(" "),e("p",[a._v("ITERATE语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 continue，意思为“再次循环”。")]),a._v(" "),e("p",[a._v("语句基本格式如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ITERATE label\n")])])]),e("p",[a._v("label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。")]),a._v(" "),e("p",[e("strong",[a._v("举例：")]),a._v("  定义局部变量num，初始值为0。循环结构中执行num + 1操作。")]),a._v(" "),e("ul",[e("li",[a._v("如果num < 10，则继续执行循环；")]),a._v(" "),e("li",[a._v("如果num > 15，则退出循环结构；")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE test_iterate()\n\nBEGIN\n\tDECLARE num INT DEFAULT 0;\n\t\n\tmy_loop:LOOP\n\t\tSET num = num + 1;\n\t\n\t\tIF num < 10 \n\t\t\tTHEN ITERATE my_loop;\n\t\tELSEIF num > 15 \n\t\t\tTHEN LEAVE my_loop;\n\t\tEND IF;\n\t\n\t\tSELECT '尚硅谷：让天下没有难学的技术';\n\t\n\tEND LOOP my_loop;\n\nEND //\n\nDELIMITER ;\n")])])]),e("h2",{attrs:{id:"_4-游标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-游标"}},[a._v("#")]),a._v(" 4. 游标")]),a._v(" "),e("h3",{attrs:{id:"_4-1-什么是游标-或光标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-什么是游标-或光标"}},[a._v("#")]),a._v(" 4.1 什么是游标（或光标）")]),a._v(" "),e("p",[a._v("虽然我们也可以通过筛选条件 WHERE 和 HAVING，或者是限定返回记录的关键字 LIMIT 返回一条记录，但是，却无法在结果集中像指针一样，向前定位一条记录、向后定位一条记录，或者是"),e("code",[a._v("随意定位到某一条记录")]),a._v("，并对记录的数据进行处理。")]),a._v(" "),e("p",[a._v("这个时候，就可以用到游标。游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作的数据结构。"),e("strong",[a._v("游标让 SQL 这种面向集合的语言有了面向过程开发的能力。")])]),a._v(" "),e("p",[a._v("在 SQL 中，游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针。这里游标"),e("code",[a._v("充当了指针的作用")]),a._v("，我们可以通过操作游标来对数据行进行操作。")]),a._v(" "),e("p",[a._v("MySQL中游标可以在存储过程和函数中使用。")]),a._v(" "),e("p",[a._v("比如，我们查询了 employees 数据表中工资高于15000的员工都有哪些：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT employee_id,last_name,salary FROM employees\nWHERE salary > 15000;\n")])])]),e("p",[e("img",{attrs:{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20211111182656990.png",alt:"image-20211111182656990"}})]),a._v(" "),e("p",[a._v("这里我们就可以通过游标来操作数据行，如图所示此时游标所在的行是“108”的记录，我们也可以在结果集上滚动游标，指向结果集中的任意一行。")]),a._v(" "),e("h3",{attrs:{id:"_4-2-使用游标步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-使用游标步骤"}},[a._v("#")]),a._v(" 4.2 使用游标步骤")]),a._v(" "),e("p",[a._v("游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明。")]),a._v(" "),e("p",[a._v("如果我们想要使用游标，一般需要经历四个步骤。不同的 DBMS 中，使用游标的语法可能略有不同。")]),a._v(" "),e("p",[e("strong",[a._v("第一步，声明游标")])]),a._v(" "),e("p",[a._v("在MySQL中，使用DECLARE关键字来声明游标，其语法的基本形式如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DECLARE cursor_name CURSOR FOR select_statement; \n")])])]),e("p",[a._v("这个语法适用于 MySQL，SQL Server，DB2 和 MariaDB。如果是用 Oracle 或者 PostgreSQL，需要写成：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DECLARE cursor_name CURSOR IS select_statement;\n")])])]),e("p",[a._v("要使用 SELECT 语句来获取数据结果集，而此时还没有开始遍历数据，这里 select_statement 代表的是 SELECT 语句，返回一个用于创建游标的结果集。")]),a._v(" "),e("p",[a._v("比如：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DECLARE cur_emp CURSOR FOR \nSELECT employee_id,salary FROM employees;\n")])])]),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DECLARE cursor_fruit CURSOR FOR \nSELECT f_name, f_price FROM fruits ;\n")])])]),e("p",[e("strong",[a._v("第二步，打开游标")])]),a._v(" "),e("p",[a._v("打开游标的语法如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("OPEN cursor_name\n")])])]),e("p",[a._v("当我们定义好游标之后，如果想要使用游标，必须先打开游标。打开游标的时候 SELECT 语句的查询结果集就会送到游标工作区，为后面游标的"),e("code",[a._v("逐条读取")]),a._v("结果集中的记录做准备。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("OPEN　cur_emp ;\n")])])]),e("p",[e("strong",[a._v("第三步，使用游标（从游标中取得数据）")])]),a._v(" "),e("p",[a._v("语法如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("FETCH cursor_name INTO var_name [, var_name] ...\n")])])]),e("p",[a._v("这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 var_name 这个变量中，游标指针指到下一行。如果游标读取的数据行有多个列名，则在 INTO 关键字后面赋值给多个变量名即可。")]),a._v(" "),e("p",[a._v("注意：var_name必须在声明游标之前就定义好。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("FETCH　cur_emp INTO emp_id, emp_sal ;\n")])])]),e("p",[a._v("注意："),e("strong",[a._v("游标的查询结果集中的字段数，必须跟 INTO 后面的变量数一致")]),a._v("，否则，在存储过程执行的时候，MySQL 会提示错误。")]),a._v(" "),e("p",[e("strong",[a._v("第四步，关闭游标")])]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("CLOSE cursor_name\n")])])]),e("p",[a._v("有 OPEN 就会有 CLOSE，也就是打开和关闭游标。当我们使用完游标后需要关闭掉该游标。因为游标会"),e("code",[a._v("占用系统资源")]),a._v("，如果不及时关闭，"),e("strong",[a._v("游标会一直保持到存储过程结束")]),a._v("，影响系统运行的效率。而关闭游标的操作，会释放游标占用的系统资源。")]),a._v(" "),e("p",[a._v("关闭游标之后，我们就不能再检索查询结果中的数据行，如果需要检索只能再次打开游标。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("CLOSE　cur_emp;\n")])])]),e("h3",{attrs:{id:"_4-3-举例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-举例"}},[a._v("#")]),a._v(" 4.3 举例")]),a._v(" "),e("p",[a._v("创建存储过程“get_count_by_limit_total_salary()”，声明IN参数 limit_total_salary，DOUBLE类型；声明OUT参数total_count，INT类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count。")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("DELIMITER //\n\nCREATE PROCEDURE get_count_by_limit_total_salary(IN limit_total_salary DOUBLE,OUT total_count INT)\n\nBEGIN\n\tDECLARE sum_salary DOUBLE DEFAULT 0;  #记录累加的总工资\n\tDECLARE cursor_salary DOUBLE DEFAULT 0; #记录某一个工资值\n\tDECLARE emp_count INT DEFAULT 0; #记录循环个数\n\t#定义游标\n\tDECLARE emp_cursor CURSOR FOR SELECT salary FROM employees ORDER BY salary DESC;\n\t#打开游标\n\tOPEN emp_cursor;\n\t\n\tREPEAT\n\t\t#使用游标（从游标中获取数据）\n\t\tFETCH emp_cursor INTO cursor_salary;\n\t\t\n\t\tSET sum_salary = sum_salary + cursor_salary;\n\t\tSET emp_count = emp_count + 1;\n\t\t\n\t\tUNTIL sum_salary >= limit_total_salary\n\tEND REPEAT;\n\t\n\tSET total_count = emp_count;\n\t#关闭游标\n\tCLOSE emp_cursor;\n\t\nEND //\n\nDELIMITER ;\n")])])]),e("h3",{attrs:{id:"_4-5-小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-小结"}},[a._v("#")]),a._v(" 4.5 小结")]),a._v(" "),e("p",[a._v("游标是 MySQL 的一个重要的功能，为"),e("code",[a._v("逐条读取")]),a._v("结果集中的数据，提供了完美的解决方案。跟在应用层面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。")]),a._v(" "),e("p",[a._v("但同时也会带来一些性能问题，比如在使用游标的过程中，会对数据行进行"),e("code",[a._v("加锁")]),a._v("，这样在业务并发量大的时候，不仅会影响业务之间的效率，还会"),e("code",[a._v("消耗系统资源")]),a._v("，造成内存不足，这是因为游标是在内存中进行的处理。")]),a._v(" "),e("p",[a._v("建议：养成用完之后就关闭的习惯，这样才能提高系统的整体效率。")]),a._v(" "),e("h2",{attrs:{id:"补充-mysql-8-0的新特性-全局变量的持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#补充-mysql-8-0的新特性-全局变量的持久化"}},[a._v("#")]),a._v(" 补充：MySQL 8.0的新特性—全局变量的持久化")]),a._v(" "),e("p",[a._v("在MySQL数据库中，全局变量可以通过SET GLOBAL语句来设置。例如，设置服务器语句超时的限制，可以通过设置系统变量max_execution_time来实现：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SET GLOBAL MAX_EXECUTION_TIME=2000;\n")])])]),e("p",[a._v("使用SET GLOBAL语句设置的变量值只会"),e("code",[a._v("临时生效")]),a._v("。"),e("code",[a._v("数据库重启")]),a._v("后，服务器又会从MySQL配置文件中读取变量的默认值。\nMySQL 8.0版本新增了"),e("code",[a._v("SET PERSIST")]),a._v("命令。例如，设置服务器的最大连接数为1000：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SET PERSIST global max_connections = 1000;\n")])])]),e("p",[a._v("MySQL会将该命令的配置保存到数据目录下的"),e("code",[a._v("mysqld-auto.cnf")]),a._v("文件中，下次启动时会读取该文件，用其中的配置来覆盖默认的配置文件。")]),a._v(" "),e("p",[a._v("举例：")]),a._v(" "),e("p",[a._v("查看全局变量max_connections的值，结果如下：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> show variables like '%max_connections%';\n+------------------------+-------+\n| Variable_name          | Value |\n+------------------------+-------+\n| max_connections        | 151   |\n| mysqlx_max_connections | 100   |\n+------------------------+-------+\n2 rows in set, 1 warning (0.00 sec)\n")])])]),e("p",[a._v("设置全局变量max_connections的值：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> set persist max_connections=1000;\nQuery OK, 0 rows affected (0.00 sec)\n")])])]),e("p",[e("code",[a._v("重启MySQL服务器")]),a._v("，再次查询max_connections的值：")]),a._v(" "),e("div",{staticClass:"language-mysql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql> show variables like '%max_connections%';\n+------------------------+-------+\n| Variable_name          | Value |\n+------------------------+-------+\n| max_connections        | 1000  |\n| mysqlx_max_connections | 100   |\n+------------------------+-------+\n2 rows in set, 1 warning (0.00 sec)\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);